
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.A2;

import java_cup.runtime.*;
import copyanalyzer.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserA2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserA2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserA2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserA2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\004\004\000\002\004\003\000\002\005\010" +
    "\000\002\011\004\000\002\011\003\000\002\006\005\000" +
    "\002\006\003\000\002\010\004\000\002\010\003\000\002" +
    "\010\004\000\002\010\005\000\002\010\004\000\002\010" +
    "\003\000\002\007\004\000\002\007\003\000\002\012\007" +
    "\000\002\012\006\000\002\012\006\000\002\012\005\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\042\012\000\002\042" +
    "\011\000\002\042\010\000\002\042\011\000\002\037\006" +
    "\000\002\037\005\000\002\041\004\000\002\041\003\000" +
    "\002\040\005\000\002\040\003\000\002\036\003\000\002" +
    "\036\003\000\002\035\011\000\002\035\010\000\002\025" +
    "\011\000\002\033\004\000\002\033\003\000\002\032\010" +
    "\000\002\032\007\000\002\034\006\000\002\034\003\000" +
    "\002\024\013\000\002\024\012\000\002\023\011\000\002" +
    "\022\017\000\002\031\006\000\002\031\005\000\002\021" +
    "\004\000\002\021\003\000\002\020\003\000\002\020\004" +
    "\000\002\020\005\000\002\020\004\000\002\015\011\000" +
    "\002\016\006\000\002\017\012\000\002\026\005\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\004\004\004\001\002\000\004\051\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\025\011\001\002\000" +
    "\004\051\014\001\002\000\006\026\ufffd\051\ufffd\001\002" +
    "\000\006\026\260\051\014\001\002\000\004\027\015\001" +
    "\002\000\006\030\020\051\021\001\002\000\004\025\025" +
    "\001\002\000\006\030\023\031\022\001\002\000\004\025" +
    "\ufffa\001\002\000\006\030\ufff8\031\ufff8\001\002\000\004" +
    "\051\024\001\002\000\004\025\ufffb\001\002\000\006\030" +
    "\ufff9\031\ufff9\001\002\000\032\005\053\006\046\007\043" +
    "\012\045\014\056\015\036\016\050\017\031\023\047\051" +
    "\044\052\052\053\051\001\002\000\036\005\ufff0\006\ufff0" +
    "\007\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\021" +
    "\ufff0\023\ufff0\026\ufff0\051\ufff0\052\ufff0\053\ufff0\001\002" +
    "\000\036\005\uffe4\006\uffe4\007\uffe4\012\uffe4\014\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\021\uffe4\023\uffe4\026\uffe4\051\uffe4" +
    "\052\uffe4\053\uffe4\001\002\000\036\005\uffe9\006\uffe9\007" +
    "\uffe9\012\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\021\uffe9" +
    "\023\uffe9\026\uffe9\051\uffe9\052\uffe9\053\uffe9\001\002\000" +
    "\004\027\235\001\002\000\036\005\uffe7\006\uffe7\007\uffe7" +
    "\012\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\021\uffe7\023" +
    "\uffe7\026\uffe7\051\uffe7\052\uffe7\053\uffe7\001\002\000\034" +
    "\005\053\006\046\007\043\012\045\014\056\015\036\016" +
    "\050\017\031\023\047\026\234\051\044\052\052\053\051" +
    "\001\002\000\040\005\uffbc\006\uffbc\007\uffbc\012\uffbc\013" +
    "\216\014\uffbc\015\uffbc\016\uffbc\017\uffbc\021\uffbc\023\uffbc" +
    "\026\uffbc\051\uffbc\052\uffbc\053\uffbc\001\002\000\036\005" +
    "\uffe6\006\uffe6\007\uffe6\012\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\021\uffe6\023\uffe6\026\uffe6\051\uffe6\052\uffe6\053" +
    "\uffe6\001\002\000\004\027\205\001\002\000\036\005\uffeb" +
    "\006\uffeb\007\uffeb\012\uffeb\014\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\021\uffeb\023\uffeb\026\uffeb\051\uffeb\052\uffeb\053\uffeb" +
    "\001\002\000\004\051\174\001\002\000\036\005\uffe8\006" +
    "\uffe8\007\uffe8\012\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\021\uffe8\023\uffe8\026\uffe8\051\uffe8\052\uffe8\053\uffe8\001" +
    "\002\000\036\005\uffe5\006\uffe5\007\uffe5\012\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\021\uffe5\023\uffe5\026\uffe5\051" +
    "\uffe5\052\uffe5\053\uffe5\001\002\000\004\051\uffe0\001\002" +
    "\000\006\027\153\033\154\001\002\000\004\027\145\001" +
    "\002\000\004\051\uffe1\001\002\000\004\061\137\001\002" +
    "\000\004\025\127\001\002\000\036\005\uffce\006\uffce\007" +
    "\uffce\012\uffce\014\uffce\015\uffce\016\uffce\017\uffce\021\uffce" +
    "\023\uffce\026\uffce\051\uffce\052\uffce\053\uffce\001\002\000" +
    "\036\005\uffcf\006\uffcf\007\uffcf\012\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\021\uffcf\023\uffcf\026\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\001\002\000\004\051\uffe2\001\002\000\036" +
    "\005\uffea\006\uffea\007\uffea\012\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\021\uffea\023\uffea\026\uffea\051\uffea\052\uffea" +
    "\053\uffea\001\002\000\036\005\uffe3\006\uffe3\007\uffe3\012" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\021\uffe3\023\uffe3" +
    "\026\uffe3\051\uffe3\052\uffe3\053\uffe3\001\002\000\004\027" +
    "\057\001\002\000\012\005\053\006\046\007\043\051\062" +
    "\001\002\000\004\032\076\001\002\000\004\051\073\001" +
    "\002\000\004\033\063\001\002\000\016\010\070\011\067" +
    "\047\065\050\064\051\072\054\071\001\002\000\062\005" +
    "\uffdf\006\uffdf\007\uffdf\012\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\021\uffdf\023\uffdf\026\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\034\uffdf\036\uffdf\037\uffdf\051\uffdf\052\uffdf\053\uffdf" +
    "\055\uffdf\056\uffdf\057\uffdf\060\uffdf\001\002\000\062\005" +
    "\uffde\006\uffde\007\uffde\012\uffde\014\uffde\015\uffde\016\uffde" +
    "\017\uffde\021\uffde\023\uffde\026\uffde\030\uffde\031\uffde\032" +
    "\uffde\034\uffde\036\uffde\037\uffde\051\uffde\052\uffde\053\uffde" +
    "\055\uffde\056\uffde\057\uffde\060\uffde\001\002\000\004\032" +
    "\uffbf\001\002\000\062\005\uffdb\006\uffdb\007\uffdb\012\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\021\uffdb\023\uffdb\026" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\034\uffdb\036\uffdb\037\uffdb" +
    "\051\uffdb\052\uffdb\053\uffdb\055\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\001\002\000\062\005\uffdc\006\uffdc\007\uffdc\012\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\021\uffdc\023\uffdc\026" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\034\uffdc\036\uffdc\037\uffdc" +
    "\051\uffdc\052\uffdc\053\uffdc\055\uffdc\056\uffdc\057\uffdc\060" +
    "\uffdc\001\002\000\062\005\uffdd\006\uffdd\007\uffdd\012\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\021\uffdd\023\uffdd\026" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\034\uffdd\036\uffdd\037\uffdd" +
    "\051\uffdd\052\uffdd\053\uffdd\055\uffdd\056\uffdd\057\uffdd\060" +
    "\uffdd\001\002\000\062\005\uffda\006\uffda\007\uffda\012\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\021\uffda\023\uffda\026" +
    "\uffda\030\uffda\031\uffda\032\uffda\034\uffda\036\uffda\037\uffda" +
    "\051\uffda\052\uffda\053\uffda\055\uffda\056\uffda\057\uffda\060" +
    "\uffda\001\002\000\004\033\074\001\002\000\016\010\070" +
    "\011\067\047\065\050\064\051\072\054\071\001\002\000" +
    "\004\032\uffc0\001\002\000\016\010\070\011\067\047\065" +
    "\050\064\051\072\054\071\001\002\000\004\032\111\001" +
    "\002\000\016\036\105\037\106\055\102\056\107\057\103" +
    "\060\104\001\002\000\016\010\070\011\067\047\065\050" +
    "\064\051\072\054\071\001\002\000\016\010\uffaf\011\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\054\uffaf\001\002\000\016\010" +
    "\uffb3\011\uffb3\047\uffb3\050\uffb3\051\uffb3\054\uffb3\001\002" +
    "\000\016\010\uffb4\011\uffb4\047\uffb4\050\uffb4\051\uffb4\054" +
    "\uffb4\001\002\000\016\010\uffb2\011\uffb2\047\uffb2\050\uffb2" +
    "\051\uffb2\054\uffb2\001\002\000\016\010\uffb1\011\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\054\uffb1\001\002\000\016\010\uffb0" +
    "\011\uffb0\047\uffb0\050\uffb0\051\uffb0\054\uffb0\001\002\000" +
    "\006\030\uffb5\032\uffb5\001\002\000\004\051\112\001\002" +
    "\000\004\042\113\001\002\000\004\042\114\001\002\000" +
    "\004\030\115\001\002\000\004\025\116\001\002\000\034" +
    "\005\053\006\046\007\043\012\045\014\056\015\036\016" +
    "\050\017\031\021\120\023\047\051\044\052\052\053\051" +
    "\001\002\000\036\005\ufff6\006\ufff6\007\ufff6\012\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\021\ufff6\023\ufff6\026\ufff6" +
    "\051\ufff6\052\ufff6\053\ufff6\001\002\000\040\005\ufff2\006" +
    "\ufff2\007\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2" +
    "\021\ufff2\023\ufff2\026\ufff2\032\126\051\ufff2\052\ufff2\053" +
    "\ufff2\001\002\000\036\005\053\006\046\007\043\012\045" +
    "\014\056\015\036\016\050\017\031\021\123\023\047\026" +
    "\124\051\044\052\052\053\051\001\002\000\036\005\ufff7" +
    "\006\ufff7\007\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\021\ufff7\023\ufff7\026\ufff7\051\ufff7\052\ufff7\053\ufff7" +
    "\001\002\000\040\005\ufff5\006\ufff5\007\ufff5\012\ufff5\014" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\021\ufff5\023\ufff5\026\ufff5" +
    "\032\125\051\ufff5\052\ufff5\053\ufff5\001\002\000\036\005" +
    "\uffc1\006\uffc1\007\uffc1\012\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\021\uffc1\023\uffc1\026\uffc1\051\uffc1\052\uffc1\053" +
    "\uffc1\001\002\000\036\005\ufff4\006\ufff4\007\ufff4\012\ufff4" +
    "\014\ufff4\015\ufff4\016\ufff4\017\ufff4\021\ufff4\023\ufff4\026" +
    "\ufff4\051\ufff4\052\ufff4\053\ufff4\001\002\000\036\005\ufff3" +
    "\006\ufff3\007\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3\017" +
    "\ufff3\021\ufff3\023\ufff3\026\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\001\002\000\034\005\053\006\046\007\043\012\045\014" +
    "\056\015\036\016\050\017\031\021\120\023\047\051\044" +
    "\052\052\053\051\001\002\000\036\005\053\006\046\007" +
    "\043\012\045\014\056\015\036\016\050\017\031\021\123" +
    "\023\047\026\131\051\044\052\052\053\051\001\002\000" +
    "\004\015\132\001\002\000\004\027\133\001\002\000\016" +
    "\010\070\011\067\047\065\050\064\051\072\054\071\001" +
    "\002\000\004\030\135\001\002\000\040\005\uffc3\006\uffc3" +
    "\007\uffc3\012\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\021" +
    "\uffc3\023\uffc3\026\uffc3\032\136\051\uffc3\052\uffc3\053\uffc3" +
    "\001\002\000\036\005\uffc4\006\uffc4\007\uffc4\012\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\021\uffc4\023\uffc4\026\uffc4" +
    "\051\uffc4\052\uffc4\053\uffc4\001\002\000\004\024\140\001" +
    "\002\000\004\027\141\001\002\000\004\051\142\001\002" +
    "\000\004\030\143\001\002\000\040\005\uffcc\006\uffcc\007" +
    "\uffcc\012\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\021\uffcc" +
    "\023\uffcc\026\uffcc\032\144\051\uffcc\052\uffcc\053\uffcc\001" +
    "\002\000\036\005\uffcd\006\uffcd\007\uffcd\012\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\021\uffcd\023\uffcd\026\uffcd\051" +
    "\uffcd\052\uffcd\053\uffcd\001\002\000\016\010\070\011\067" +
    "\047\065\050\064\051\072\054\071\001\002\000\004\030" +
    "\147\001\002\000\004\025\150\001\002\000\034\005\053" +
    "\006\046\007\043\012\045\014\056\015\036\016\050\017" +
    "\031\021\120\023\047\051\044\052\052\053\051\001\002" +
    "\000\036\005\053\006\046\007\043\012\045\014\056\015" +
    "\036\016\050\017\031\021\123\023\047\026\152\051\044" +
    "\052\052\053\051\001\002\000\040\005\uffb8\006\uffb8\007" +
    "\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\021\uffb8\023\uffb8\026\uffb8\051\uffb8\052\uffb8\053\uffb8\001" +
    "\002\000\020\010\070\011\067\030\166\047\065\050\064" +
    "\051\072\054\071\001\002\000\020\010\070\011\067\047" +
    "\065\050\064\051\072\054\071\062\155\001\002\000\004" +
    "\027\160\001\002\000\040\005\uffec\006\uffec\007\uffec\012" +
    "\uffec\014\uffec\015\uffec\016\uffec\017\uffec\021\uffec\023\uffec" +
    "\026\uffec\032\157\051\uffec\052\uffec\053\uffec\001\002\000" +
    "\036\005\uffee\006\uffee\007\uffee\012\uffee\014\uffee\015\uffee" +
    "\016\uffee\017\uffee\021\uffee\023\uffee\026\uffee\051\uffee\052" +
    "\uffee\053\uffee\001\002\000\004\047\161\001\002\000\004" +
    "\030\162\001\002\000\040\005\uffd7\006\uffd7\007\uffd7\012" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\021\uffd7\023\uffd7" +
    "\026\uffd7\032\163\051\uffd7\052\uffd7\053\uffd7\001\002\000" +
    "\036\005\uffd6\006\uffd6\007\uffd6\012\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\021\uffd6\023\uffd6\026\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\001\002\000\006\030\uffd0\031\uffd0\001\002" +
    "\000\006\030\172\031\171\001\002\000\040\005\uffd2\006" +
    "\uffd2\007\uffd2\012\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\021\uffd2\023\uffd2\026\uffd2\032\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\001\002\000\040\005\uffd4\006\uffd4\007\uffd4\012\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\021\uffd4\023\uffd4\026" +
    "\uffd4\032\170\051\uffd4\052\uffd4\053\uffd4\001\002\000\036" +
    "\005\uffd5\006\uffd5\007\uffd5\012\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\021\uffd5\023\uffd5\026\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\001\002\000\016\010\070\011\067\047\065\050" +
    "\064\051\072\054\071\001\002\000\040\005\uffd3\006\uffd3" +
    "\007\uffd3\012\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\021" +
    "\uffd3\023\uffd3\026\uffd3\032\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\001\002\000\006\030\uffd1\031\uffd1\001\002\000\004\033" +
    "\175\001\002\000\020\010\070\011\067\047\065\050\064" +
    "\051\072\054\071\062\176\001\002\000\004\027\201\001" +
    "\002\000\040\005\uffed\006\uffed\007\uffed\012\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\021\uffed\023\uffed\026\uffed\032" +
    "\200\051\uffed\052\uffed\053\uffed\001\002\000\036\005\uffef" +
    "\006\uffef\007\uffef\012\uffef\014\uffef\015\uffef\016\uffef\017" +
    "\uffef\021\uffef\023\uffef\026\uffef\051\uffef\052\uffef\053\uffef" +
    "\001\002\000\004\047\202\001\002\000\004\030\203\001" +
    "\002\000\040\005\uffd8\006\uffd8\007\uffd8\012\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\021\uffd8\023\uffd8\026\uffd8\032" +
    "\204\051\uffd8\052\uffd8\053\uffd8\001\002\000\036\005\uffd9" +
    "\006\uffd9\007\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\021\uffd9\023\uffd9\026\uffd9\051\uffd9\052\uffd9\053\uffd9" +
    "\001\002\000\016\010\070\011\067\047\065\050\064\051" +
    "\072\054\071\001\002\000\004\030\207\001\002\000\004" +
    "\025\210\001\002\000\034\005\053\006\046\007\043\012" +
    "\045\014\056\015\036\016\050\017\031\021\120\023\047" +
    "\051\044\052\052\053\051\001\002\000\036\005\053\006" +
    "\046\007\043\012\045\014\056\015\036\016\050\017\031" +
    "\021\123\023\047\026\212\051\044\052\052\053\051\001" +
    "\002\000\036\005\uffc2\006\uffc2\007\uffc2\012\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\021\uffc2\023\uffc2\026\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\001\002\000\036\005\uffbb\006\uffbb" +
    "\007\uffbb\012\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\021" +
    "\uffbb\023\uffbb\026\uffbb\051\uffbb\052\uffbb\053\uffbb\001\002" +
    "\000\040\005\uffbd\006\uffbd\007\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\021\uffbd\023\uffbd\026\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\001\002\000\040\005\uffb9\006" +
    "\uffb9\007\uffb9\012\uffb9\013\216\014\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\021\uffb9\023\uffb9\026\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\001\002\000\006\012\217\025\220\001\002\000\004" +
    "\027\223\001\002\000\034\005\053\006\046\007\043\012" +
    "\045\014\056\015\036\016\050\017\031\021\120\023\047" +
    "\051\044\052\052\053\051\001\002\000\036\005\053\006" +
    "\046\007\043\012\045\014\056\015\036\016\050\017\031" +
    "\021\123\023\047\026\222\051\044\052\052\053\051\001" +
    "\002\000\036\005\uffb7\006\uffb7\007\uffb7\012\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\021\uffb7\023\uffb7\026\uffb7\051" +
    "\uffb7\052\uffb7\053\uffb7\001\002\000\016\010\070\011\067" +
    "\047\065\050\064\051\072\054\071\001\002\000\004\030" +
    "\225\001\002\000\004\025\226\001\002\000\034\005\053" +
    "\006\046\007\043\012\045\014\056\015\036\016\050\017" +
    "\031\021\120\023\047\051\044\052\052\053\051\001\002" +
    "\000\036\005\053\006\046\007\043\012\045\014\056\015" +
    "\036\016\050\017\031\021\123\023\047\026\230\051\044" +
    "\052\052\053\051\001\002\000\040\005\uffb6\006\uffb6\007" +
    "\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\021\uffb6\023\uffb6\026\uffb6\051\uffb6\052\uffb6\053\uffb6\001" +
    "\002\000\036\005\uffba\006\uffba\007\uffba\012\uffba\014\uffba" +
    "\015\uffba\016\uffba\017\uffba\021\uffba\023\uffba\026\uffba\051" +
    "\uffba\052\uffba\053\uffba\001\002\000\040\005\uffbe\006\uffbe" +
    "\007\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017" +
    "\uffbe\021\uffbe\023\uffbe\026\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\001\002\000\036\005\ufff1\006\ufff1\007\ufff1\012\ufff1\014" +
    "\ufff1\015\ufff1\016\ufff1\017\ufff1\021\ufff1\023\ufff1\026\ufff1" +
    "\051\ufff1\052\ufff1\053\ufff1\001\002\000\006\026\ufffc\051" +
    "\ufffc\001\002\000\004\051\236\001\002\000\004\030\237" +
    "\001\002\000\004\025\240\001\002\000\004\020\243\001" +
    "\002\000\010\020\243\022\253\026\252\001\002\000\010" +
    "\020\uffc9\022\uffc9\026\uffc9\001\002\000\016\010\070\011" +
    "\067\047\065\050\064\051\072\054\071\001\002\000\004" +
    "\034\245\001\002\000\032\005\053\006\046\007\043\012" +
    "\045\014\056\015\036\016\050\017\031\023\047\051\044" +
    "\052\052\053\051\001\002\000\034\005\053\006\046\007" +
    "\043\012\045\014\056\015\036\016\050\017\031\021\247" +
    "\023\047\051\044\052\052\053\051\001\002\000\012\020" +
    "\uffc7\022\uffc7\026\uffc7\032\250\001\002\000\010\020\uffc8" +
    "\022\uffc8\026\uffc8\001\002\000\036\005\uffcb\006\uffcb\007" +
    "\uffcb\012\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\021\uffcb" +
    "\023\uffcb\026\uffcb\051\uffcb\052\uffcb\053\uffcb\001\002\000" +
    "\036\005\uffc5\006\uffc5\007\uffc5\012\uffc5\014\uffc5\015\uffc5" +
    "\016\uffc5\017\uffc5\021\uffc5\023\uffc5\026\uffc5\051\uffc5\052" +
    "\uffc5\053\uffc5\001\002\000\004\034\255\001\002\000\010" +
    "\020\uffca\022\uffca\026\uffca\001\002\000\034\005\053\006" +
    "\046\007\043\012\045\014\056\015\036\016\050\017\031" +
    "\021\120\023\047\051\044\052\052\053\051\001\002\000" +
    "\036\005\053\006\046\007\043\012\045\014\056\015\036" +
    "\016\050\017\031\021\123\023\047\026\257\051\044\052" +
    "\052\053\051\001\002\000\036\005\uffc6\006\uffc6\007\uffc6" +
    "\012\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\021\uffc6\023" +
    "\uffc6\026\uffc6\051\uffc6\052\uffc6\053\uffc6\001\002\000\004" +
    "\002\uffff\001\002\000\006\026\ufffe\051\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\012\005\011\001\001\000" +
    "\002\001\001\000\004\005\260\001\001\000\002\001\001" +
    "\000\006\006\016\011\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\007" +
    "\032\012\025\013\037\015\033\020\036\022\053\023\027" +
    "\024\040\025\031\035\034\036\041\037\026\042\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\012\232\013" +
    "\037\015\033\020\036\022\053\023\027\024\040\025\031" +
    "\035\034\036\041\037\026\042\054\001\001\000\010\016" +
    "\212\017\213\021\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\060\031\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\074\001\001" +
    "\000\002\001\001\000\006\014\077\026\076\001\001\000" +
    "\002\001\001\000\004\027\100\001\001\000\004\014\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\010\120\012\116\013\037\015\033\020\036\022\053\023" +
    "\027\024\040\025\031\035\034\036\041\037\026\042\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\012" +
    "\121\013\037\015\033\020\036\022\053\023\027\024\040" +
    "\025\031\035\034\036\041\037\026\042\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\010\127\012\116\013" +
    "\037\015\033\020\036\022\053\023\027\024\040\025\031" +
    "\035\034\036\041\037\026\042\054\001\001\000\032\012" +
    "\121\013\037\015\033\020\036\022\053\023\027\024\040" +
    "\025\031\035\034\036\041\037\026\042\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\077\026\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\077\026\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\010\150\012\116\013\037\015\033\020" +
    "\036\022\053\023\027\024\040\025\031\035\034\036\041" +
    "\037\026\042\054\001\001\000\032\012\121\013\037\015" +
    "\033\020\036\022\053\023\027\024\040\025\031\035\034" +
    "\036\041\037\026\042\054\001\001\000\002\001\001\000" +
    "\010\014\163\040\164\041\166\001\001\000\004\014\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\077\026\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\010\210\012\116\013\037\015\033\020\036" +
    "\022\053\023\027\024\040\025\031\035\034\036\041\037" +
    "\026\042\054\001\001\000\032\012\121\013\037\015\033" +
    "\020\036\022\053\023\027\024\040\025\031\035\034\036" +
    "\041\037\026\042\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\230\017\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\010\220" +
    "\012\116\013\037\015\033\020\036\022\053\023\027\024" +
    "\040\025\031\035\034\036\041\037\026\042\054\001\001" +
    "\000\032\012\121\013\037\015\033\020\036\022\053\023" +
    "\027\024\040\025\031\035\034\036\041\037\026\042\054" +
    "\001\001\000\002\001\001\000\006\014\077\026\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\010\226" +
    "\012\116\013\037\015\033\020\036\022\053\023\027\024" +
    "\040\025\031\035\034\036\041\037\026\042\054\001\001" +
    "\000\032\012\121\013\037\015\033\020\036\022\053\023" +
    "\027\024\040\025\031\035\034\036\041\037\026\042\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\241\033" +
    "\240\001\001\000\006\032\253\034\250\001\001\000\002" +
    "\001\001\000\004\014\243\001\001\000\002\001\001\000" +
    "\034\007\245\012\025\013\037\015\033\020\036\022\053" +
    "\023\027\024\040\025\031\035\034\036\041\037\026\042" +
    "\054\001\001\000\032\012\232\013\037\015\033\020\036" +
    "\022\053\023\027\024\040\025\031\035\034\036\041\037" +
    "\026\042\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\010\255\012\116\013\037\015\033" +
    "\020\036\022\053\023\027\024\040\025\031\035\034\036" +
    "\041\037\026\042\054\001\001\000\032\012\121\013\037" +
    "\015\033\020\036\022\053\023\027\024\040\025\031\035" +
    "\034\036\041\037\026\042\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserA2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserA2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserA2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}






    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserA2$actions {
  private final parserA2 parser;

  /** Constructor */
  CUP$parserA2$actions(parserA2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserA2$do_action_part00000000(
    int                        CUP$parserA2$act_num,
    java_cup.runtime.lr_parser CUP$parserA2$parser,
    java.util.Stack            CUP$parserA2$stack,
    int                        CUP$parserA2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserA2$result;

      /* select the action based on the action number */
      switch (CUP$parserA2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)).value;
		RESULT = start_val;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserA2$parser.done_parsing();
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CLASE 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASE ::= classe id llavea FUNCIONES llavec 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("CLASE",1, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCIONES ::= FUNCION 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCION ::= id parentesisa PARAMETROS llavea LINEAS llavec 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("FUNCION",3, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-5)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PARAMETROS ::= VARIABLES parentesisc 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PARAMETROS ::= parentesisc 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARIABLES ::= VARIABLES coma id 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLES",4, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VARIABLES ::= id 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLES",4, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LINEAS2 ::= LINEAS2 LINEA 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEAS2",6, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LINEAS2 ::= LINEA 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEAS2",6, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LINEAS2 ::= LINEAS2 breakk 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEAS2",6, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LINEAS2 ::= LINEAS2 breakk pcoma 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEAS2",6, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LINEAS2 ::= breakk pcoma 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEAS2",6, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LINEAS2 ::= breakk 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEAS2",6, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LINEAS ::= LINEAS LINEA 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEAS",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LINEAS ::= LINEA 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEAS",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LINEA ::= TIPO id igual VALOR pcoma 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",8, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LINEA ::= id igual VALOR pcoma 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",8, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LINEA ::= TIPO id igual VALOR 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",8, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LINEA ::= id igual VALOR 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",8, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LINEA ::= IFS 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",8, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LINEA ::= FOR 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",8, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LINEA ::= WHILE 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",8, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LINEA ::= DO 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",8, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LINEA ::= SWITCH 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",8, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LINEA ::= CONSOLA 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",8, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LINEA ::= COMENTARIOS 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",8, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LINEA ::= LLAMADA 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",8, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LINEA ::= IMPORTAR 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",8, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO ::= var 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO ::= let 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO ::= constt 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALOR ::= decimal 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALOR ::= cadena 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALOR ::= caracter 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALOR ::= truee 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALOR ::= falsee 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALOR ::= id 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IMPORTAR ::= TIPO id igual require parentesisa cadena parentesisc pcoma 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("IMPORTAR",32, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-7)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IMPORTAR ::= TIPO id igual require parentesisa cadena parentesisc 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("IMPORTAR",32, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-6)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IMPORTAR ::= id igual require parentesisa cadena parentesisc 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("IMPORTAR",32, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-5)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IMPORTAR ::= id igual require parentesisa cadena parentesisc pcoma 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("IMPORTAR",32, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-6)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LLAMADA ::= id parentesisa PARAMETROS2 pcoma 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LLAMADA",29, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LLAMADA ::= id parentesisa PARAMETROS2 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LLAMADA",29, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PARAMETROS2 ::= ENVIAR parentesisc 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",31, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARAMETROS2 ::= parentesisc 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",31, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ENVIAR ::= ENVIAR coma VALOR 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("ENVIAR",30, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ENVIAR ::= VALOR 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("ENVIAR",30, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COMENTARIOS ::= comentarioo 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",28, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COMENTARIOS ::= comentarioomu 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",28, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONSOLA ::= console punto log parentesisa id parentesisc pcoma 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("CONSOLA",27, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-6)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONSOLA ::= console punto log parentesisa id parentesisc 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("CONSOLA",27, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-5)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SWITCH ::= switchh parentesisa id parentesisc llavea CASES DEFAULT 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("SWITCH",19, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-6)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CASES ::= CASES CASE 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("CASES",25, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CASES ::= CASE 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("CASES",25, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CASE ::= casee VALOR dpuntos LINEAS breakk pcoma 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("CASE",24, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-5)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CASE ::= casee VALOR dpuntos LINEAS breakk 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("CASE",24, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DEFAULT ::= defaultt dpuntos LINEAS2 llavec 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("DEFAULT",26, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DEFAULT ::= llavec 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("DEFAULT",26, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DO ::= doo llavea LINEAS2 llavec whilee parentesisa CONDICION parentesisc pcoma 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("DO",18, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-8)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DO ::= doo llavea LINEAS2 llavec whilee parentesisa CONDICION parentesisc 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("DO",18, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-7)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // WHILE ::= whilee parentesisa CONDICION parentesisc llavea LINEAS2 llavec 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("WHILE",17, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-6)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FOR ::= forr parentesisa INICIALIZADOR pcoma CONDICION pcoma id suma suma parentesisc llavea LINEAS2 llavec 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("FOR",16, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-12)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INICIALIZADOR ::= TIPO id igual VALOR 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("INICIALIZADOR",23, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INICIALIZADOR ::= id igual VALOR 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("INICIALIZADOR",23, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ELIFS ::= ELIFS ELIF 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("ELIFS",15, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ELIFS ::= ELIF 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("ELIFS",15, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IFS ::= IF 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("IFS",14, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IFS ::= IF ELSE 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("IFS",14, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IFS ::= IF ELIFS ELSE 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("IFS",14, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IFS ::= IF ELIFS 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("IFS",14, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IF ::= iff parentesisa CONDICION parentesisc llavea LINEAS2 llavec 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-6)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ELSE ::= elsee llavea LINEAS2 llavec 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("ELSE",12, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ELIF ::= elsee iff parentesisa CONDICION parentesisc llavea LINEAS2 llavec 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("ELIF",13, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-7)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONDICION ::= VALOR OPRELACIONALES VALOR 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPRELACIONALES ::= igualacion 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("OPRELACIONALES",21, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPRELACIONALES ::= diferencia 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("OPRELACIONALES",21, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPRELACIONALES ::= menor 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("OPRELACIONALES",21, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPRELACIONALES ::= mayor 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("OPRELACIONALES",21, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPRELACIONALES ::= maigual 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("OPRELACIONALES",21, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPRELACIONALES ::= meigual 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("OPRELACIONALES",21, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPLOGICOS ::= and 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("OPLOGICOS",22, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPLOGICOS ::= or 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("OPLOGICOS",22, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPLOGICOS ::= not 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("OPLOGICOS",22, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserA2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserA2$do_action(
    int                        CUP$parserA2$act_num,
    java_cup.runtime.lr_parser CUP$parserA2$parser,
    java.util.Stack            CUP$parserA2$stack,
    int                        CUP$parserA2$top)
    throws java.lang.Exception
    {
              return CUP$parserA2$do_action_part00000000(
                               CUP$parserA2$act_num,
                               CUP$parserA2$parser,
                               CUP$parserA2$stack,
                               CUP$parserA2$top);
    }
}

}
