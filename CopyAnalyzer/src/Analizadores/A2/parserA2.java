
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.A2;

import java_cup.runtime.*;
import copyanalyzer.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserA2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserA2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserA2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserA2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\213\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\042\004\000\002\042\004\000\002\042\003" +
    "\000\002\043\004\000\002\043\003\000\002\044\004\000" +
    "\002\044\003\000\002\041\007\000\002\041\006\000\002" +
    "\041\006\000\002\041\005\000\002\041\005\000\002\041" +
    "\004\000\002\041\003\000\002\004\004\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\005\010\000" +
    "\002\012\004\000\002\012\003\000\002\006\005\000\002" +
    "\006\003\000\002\011\004\000\002\011\003\000\002\011" +
    "\004\000\002\011\005\000\002\011\004\000\002\011\003" +
    "\000\002\010\004\000\002\010\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\007\007" +
    "\000\002\007\006\000\002\007\006\000\002\007\005\000" +
    "\002\007\005\000\002\007\004\000\002\007\007\000\002" +
    "\007\007\000\002\007\007\000\002\007\007\000\002\007" +
    "\007\000\002\007\006\000\002\007\006\000\002\007\006" +
    "\000\002\007\006\000\002\007\006\000\002\007\010\000" +
    "\002\007\010\000\002\007\010\000\002\007\010\000\002" +
    "\007\010\000\002\007\007\000\002\007\007\000\002\007" +
    "\007\000\002\007\007\000\002\007\007\000\002\007\005" +
    "\000\002\007\006\000\002\007\005\000\002\007\006\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\040\012\000\002\040\011\000\002\040\010\000\002\040" +
    "\011\000\002\035\006\000\002\035\005\000\002\037\004" +
    "\000\002\037\003\000\002\036\005\000\002\036\003\000" +
    "\002\034\003\000\002\034\003\000\002\033\011\000\002" +
    "\033\010\000\002\025\011\000\002\031\004\000\002\031" +
    "\003\000\002\030\010\000\002\030\007\000\002\032\006" +
    "\000\002\032\003\000\002\024\013\000\002\024\012\000" +
    "\002\023\011\000\002\022\015\000\002\027\006\000\002" +
    "\027\005\000\002\021\004\000\002\021\003\000\002\020" +
    "\003\000\002\020\004\000\002\020\005\000\002\020\004" +
    "\000\002\020\007\000\002\015\011\000\002\016\006\000" +
    "\002\017\012\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\006\000\002\026" +
    "\005\000\002\026\006\000\002\026\006\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\004\000\002\026" +
    "\004\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\010\004\005\052\006\053\004\001\002\000" +
    "\044\002\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9\012\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\021\uffa9\023\uffa9\026" +
    "\uffa9\030\uffa9\051\uffa9\052\uffa9\053\uffa9\001\002\000\010" +
    "\051\ufffc\052\ufffc\053\ufffc\001\002\000\044\002\uffaa\004" +
    "\uffaa\005\uffaa\006\uffaa\007\uffaa\012\uffaa\014\uffaa\015\uffaa" +
    "\016\uffaa\017\uffaa\021\uffaa\023\uffaa\026\uffaa\030\uffaa\051" +
    "\uffaa\052\uffaa\053\uffaa\001\002\000\004\002\u0110\001\002" +
    "\000\004\004\u010f\001\002\000\010\051\014\052\006\053" +
    "\004\001\002\000\004\002\000\001\002\000\010\051\ufffe" +
    "\052\ufffe\053\ufffe\001\002\000\004\025\015\001\002\000" +
    "\016\005\026\006\021\007\022\051\017\052\006\053\004" +
    "\001\002\000\020\005\uffed\006\uffed\007\uffed\026\uffed\051" +
    "\uffed\052\uffed\053\uffed\001\002\000\006\027\120\033\121" +
    "\001\002\000\020\005\026\006\021\007\022\026\112\051" +
    "\017\052\006\053\004\001\002\000\004\051\uffb6\001\002" +
    "\000\004\051\uffb5\001\002\000\004\051\027\001\002\000" +
    "\020\005\ufff1\006\ufff1\007\ufff1\026\ufff1\051\ufff1\052\ufff1" +
    "\053\ufff1\001\002\000\020\005\uffef\006\uffef\007\uffef\026" +
    "\uffef\051\uffef\052\uffef\053\uffef\001\002\000\004\051\uffb7" +
    "\001\002\000\024\005\ufff2\006\ufff2\007\ufff2\026\ufff2\032" +
    "\031\033\030\051\ufff2\052\ufff2\053\ufff2\001\002\000\024" +
    "\010\032\011\035\027\042\035\036\043\034\047\037\050" +
    "\040\051\033\054\041\001\002\000\020\005\ufff3\006\ufff3" +
    "\007\ufff3\026\ufff3\051\ufff3\052\ufff3\053\ufff3\001\002\000" +
    "\100\005\uff78\006\uff78\007\uff78\012\uff78\014\uff78\015\uff78" +
    "\016\uff78\017\uff78\021\uff78\023\uff78\026\uff78\030\uff78\031" +
    "\uff78\032\uff78\034\uff78\036\uff78\037\uff78\040\uff78\041\uff78" +
    "\042\uff78\043\uff78\044\uff78\045\uff78\046\uff78\051\uff78\052" +
    "\uff78\053\uff78\055\uff78\056\uff78\057\uff78\060\uff78\001\002" +
    "\000\100\005\uff7a\006\uff7a\007\uff7a\012\uff7a\014\uff7a\015" +
    "\uff7a\016\uff7a\017\uff7a\021\uff7a\023\uff7a\026\uff7a\030\uff7a" +
    "\031\uff7a\032\uff7a\034\uff7a\036\uff7a\037\uff7a\040\uff7a\041" +
    "\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a\046\uff7a\051\uff7a" +
    "\052\uff7a\053\uff7a\055\uff7a\056\uff7a\057\uff7a\060\uff7a\001" +
    "\002\000\024\010\032\011\035\027\042\035\036\043\034" +
    "\047\037\050\040\051\033\054\041\001\002\000\100\005" +
    "\uff77\006\uff77\007\uff77\012\uff77\014\uff77\015\uff77\016\uff77" +
    "\017\uff77\021\uff77\023\uff77\026\uff77\030\uff77\031\uff77\032" +
    "\uff77\034\uff77\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77" +
    "\043\uff77\044\uff77\045\uff77\046\uff77\051\uff77\052\uff77\053" +
    "\uff77\055\uff77\056\uff77\057\uff77\060\uff77\001\002\000\024" +
    "\010\032\011\035\027\042\035\036\043\034\047\037\050" +
    "\040\051\033\054\041\001\002\000\100\005\uff7b\006\uff7b" +
    "\007\uff7b\012\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\021" +
    "\uff7b\023\uff7b\026\uff7b\030\uff7b\031\uff7b\032\uff7b\034\uff7b" +
    "\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044" +
    "\uff7b\045\uff7b\046\uff7b\051\uff7b\052\uff7b\053\uff7b\055\uff7b" +
    "\056\uff7b\057\uff7b\060\uff7b\001\002\000\100\005\uff7c\006" +
    "\uff7c\007\uff7c\012\uff7c\014\uff7c\015\uff7c\016\uff7c\017\uff7c" +
    "\021\uff7c\023\uff7c\026\uff7c\030\uff7c\031\uff7c\032\uff7c\034" +
    "\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c" +
    "\044\uff7c\045\uff7c\046\uff7c\051\uff7c\052\uff7c\053\uff7c\055" +
    "\uff7c\056\uff7c\057\uff7c\060\uff7c\001\002\000\100\005\uff79" +
    "\006\uff79\007\uff79\012\uff79\014\uff79\015\uff79\016\uff79\017" +
    "\uff79\021\uff79\023\uff79\026\uff79\030\uff79\031\uff79\032\uff79" +
    "\034\uff79\036\uff79\037\uff79\040\uff79\041\uff79\042\uff79\043" +
    "\uff79\044\uff79\045\uff79\046\uff79\051\uff79\052\uff79\053\uff79" +
    "\055\uff79\056\uff79\057\uff79\060\uff79\001\002\000\024\010" +
    "\032\011\035\027\042\035\036\043\034\047\037\050\040" +
    "\051\033\054\041\001\002\000\054\005\ufff5\006\ufff5\007" +
    "\ufff5\026\ufff5\032\051\036\054\037\061\040\052\041\053" +
    "\042\047\043\045\044\050\045\055\046\057\051\ufff5\052" +
    "\ufff5\053\ufff5\055\044\056\060\057\046\060\056\001\002" +
    "\000\024\010\032\011\035\027\042\035\036\043\034\047" +
    "\037\050\040\051\033\054\041\001\002\000\024\010\032" +
    "\011\035\027\042\035\036\043\034\047\037\050\040\051" +
    "\033\054\041\001\002\000\024\010\032\011\035\027\042" +
    "\035\036\043\034\047\037\050\040\051\033\054\041\001" +
    "\002\000\026\010\032\011\035\027\042\033\100\035\036" +
    "\043\034\047\037\050\040\051\033\054\041\001\002\000" +
    "\030\010\032\011\035\027\042\033\074\035\036\043\034" +
    "\044\072\047\037\050\040\051\033\054\041\001\002\000" +
    "\020\005\ufff7\006\ufff7\007\ufff7\026\ufff7\051\ufff7\052\ufff7" +
    "\053\ufff7\001\002\000\024\010\032\011\035\027\042\035" +
    "\036\043\034\047\037\050\040\051\033\054\041\001\002" +
    "\000\024\010\032\011\035\027\042\035\036\043\034\047" +
    "\037\050\040\051\033\054\041\001\002\000\024\010\032" +
    "\011\035\027\042\035\036\043\034\047\037\050\040\051" +
    "\033\054\041\001\002\000\024\010\032\011\035\027\042" +
    "\035\036\043\034\047\037\050\040\051\033\054\041\001" +
    "\002\000\024\010\032\011\035\027\042\035\036\043\034" +
    "\047\037\050\040\051\033\054\041\001\002\000\024\010" +
    "\032\011\035\027\042\035\036\043\034\047\037\050\040" +
    "\051\033\054\041\001\002\000\024\010\032\011\035\027" +
    "\042\035\036\043\034\047\037\050\040\051\033\054\041" +
    "\001\002\000\024\010\032\011\035\027\042\035\036\043" +
    "\034\047\037\050\040\051\033\054\041\001\002\000\100" +
    "\005\uff85\006\uff85\007\uff85\012\uff85\014\uff85\015\uff85\016" +
    "\uff85\017\uff85\021\uff85\023\uff85\026\uff85\030\uff85\031\uff85" +
    "\032\uff85\034\uff85\036\uff85\037\uff85\040\052\041\053\042" +
    "\047\043\045\044\050\045\055\046\057\051\uff85\052\uff85" +
    "\053\uff85\055\uff85\056\uff85\057\uff85\060\uff85\001\002\000" +
    "\100\005\uff84\006\uff84\007\uff84\012\uff84\014\uff84\015\uff84" +
    "\016\uff84\017\uff84\021\uff84\023\uff84\026\uff84\030\uff84\031" +
    "\uff84\032\uff84\034\uff84\036\uff84\037\uff84\040\052\041\053" +
    "\042\047\043\045\044\050\045\055\046\057\051\uff84\052" +
    "\uff84\053\uff84\055\uff84\056\uff84\057\uff84\060\uff84\001\002" +
    "\000\100\005\uff8a\006\uff8a\007\uff8a\012\uff8a\014\uff8a\015" +
    "\uff8a\016\uff8a\017\uff8a\021\uff8a\023\uff8a\026\uff8a\030\uff8a" +
    "\031\uff8a\032\uff8a\034\uff8a\036\uff8a\037\uff8a\040\uff8a\041" +
    "\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\051\uff8a" +
    "\052\uff8a\053\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\001" +
    "\002\000\100\005\uff82\006\uff82\007\uff82\012\uff82\014\uff82" +
    "\015\uff82\016\uff82\017\uff82\021\uff82\023\uff82\026\uff82\030" +
    "\uff82\031\uff82\032\uff82\034\uff82\036\uff82\037\uff82\040\052" +
    "\041\053\042\047\043\045\044\050\045\055\046\057\051" +
    "\uff82\052\uff82\053\uff82\055\uff82\056\uff82\057\uff82\060\uff82" +
    "\001\002\000\100\005\uff8c\006\uff8c\007\uff8c\012\uff8c\014" +
    "\uff8c\015\uff8c\016\uff8c\017\uff8c\021\uff8c\023\uff8c\026\uff8c" +
    "\030\uff8c\031\uff8c\032\uff8c\034\uff8c\036\uff8c\037\uff8c\040" +
    "\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c" +
    "\051\uff8c\052\uff8c\053\uff8c\055\uff8c\056\uff8c\057\uff8c\060" +
    "\uff8c\001\002\000\100\005\uff87\006\uff87\007\uff87\012\uff87" +
    "\014\uff87\015\uff87\016\uff87\017\uff87\021\uff87\023\uff87\026" +
    "\uff87\030\uff87\031\uff87\032\uff87\034\uff87\036\uff87\037\uff87" +
    "\040\052\041\053\042\047\043\045\044\050\045\055\046" +
    "\057\051\uff87\052\uff87\053\uff87\055\uff87\056\uff87\057\uff87" +
    "\060\uff87\001\002\000\100\005\uff81\006\uff81\007\uff81\012" +
    "\uff81\014\uff81\015\uff81\016\uff81\017\uff81\021\uff81\023\uff81" +
    "\026\uff81\030\uff81\031\uff81\032\uff81\034\uff81\036\uff81\037" +
    "\uff81\040\uff81\041\uff81\042\047\043\045\044\050\045\055" +
    "\046\057\051\uff81\052\uff81\053\uff81\055\uff81\056\uff81\057" +
    "\uff81\060\uff81\001\002\000\100\005\uff80\006\uff80\007\uff80" +
    "\012\uff80\014\uff80\015\uff80\016\uff80\017\uff80\021\uff80\023" +
    "\uff80\026\uff80\030\uff80\031\uff80\032\uff80\034\uff80\036\uff80" +
    "\037\uff80\040\uff80\041\053\042\047\043\045\044\050\045" +
    "\055\046\057\051\uff80\052\uff80\053\uff80\055\uff80\056\uff80" +
    "\057\uff80\060\uff80\001\002\000\024\010\032\011\035\027" +
    "\042\035\036\043\034\047\037\050\040\051\033\054\041" +
    "\001\002\000\100\005\uff8d\006\uff8d\007\uff8d\012\uff8d\014" +
    "\uff8d\015\uff8d\016\uff8d\017\uff8d\021\uff8d\023\uff8d\026\uff8d" +
    "\030\uff8d\031\uff8d\032\uff8d\034\uff8d\036\uff8d\037\uff8d\040" +
    "\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d" +
    "\051\uff8d\052\uff8d\053\uff8d\055\uff8d\056\uff8d\057\uff8d\060" +
    "\uff8d\001\002\000\024\010\032\011\035\027\042\035\036" +
    "\043\034\047\037\050\040\051\033\054\041\001\002\000" +
    "\100\005\uff89\006\uff89\007\uff89\012\uff89\014\uff89\015\uff89" +
    "\016\uff89\017\uff89\021\uff89\023\uff89\026\uff89\030\uff89\031" +
    "\uff89\032\uff89\034\uff89\036\054\037\061\040\052\041\053" +
    "\042\047\043\045\044\050\045\055\046\057\051\uff89\052" +
    "\uff89\053\uff89\055\044\056\060\057\046\060\056\001\002" +
    "\000\100\005\uff8b\006\uff8b\007\uff8b\012\uff8b\014\uff8b\015" +
    "\uff8b\016\uff8b\017\uff8b\021\uff8b\023\uff8b\026\uff8b\030\uff8b" +
    "\031\uff8b\032\uff8b\034\uff8b\036\uff8b\037\uff8b\040\uff8b\041" +
    "\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\051\uff8b" +
    "\052\uff8b\053\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\001" +
    "\002\000\100\005\uff8f\006\uff8f\007\uff8f\012\uff8f\014\uff8f" +
    "\015\uff8f\016\uff8f\017\uff8f\021\uff8f\023\uff8f\026\uff8f\030" +
    "\uff8f\031\uff8f\032\uff8f\034\uff8f\036\uff8f\037\uff8f\040\uff8f" +
    "\041\uff8f\042\uff8f\043\uff8f\044\050\045\055\046\057\051" +
    "\uff8f\052\uff8f\053\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f" +
    "\001\002\000\024\010\032\011\035\027\042\035\036\043" +
    "\034\047\037\050\040\051\033\054\041\001\002\000\100" +
    "\005\uff88\006\uff88\007\uff88\012\uff88\014\uff88\015\uff88\016" +
    "\uff88\017\uff88\021\uff88\023\uff88\026\uff88\030\uff88\031\uff88" +
    "\032\uff88\034\uff88\036\054\037\061\040\052\041\053\042" +
    "\047\043\045\044\050\045\055\046\057\051\uff88\052\uff88" +
    "\053\uff88\055\044\056\060\057\046\060\056\001\002\000" +
    "\100\005\uff83\006\uff83\007\uff83\012\uff83\014\uff83\015\uff83" +
    "\016\uff83\017\uff83\021\uff83\023\uff83\026\uff83\030\uff83\031" +
    "\uff83\032\uff83\034\uff83\036\uff83\037\uff83\040\052\041\053" +
    "\042\047\043\045\044\050\045\055\046\057\051\uff83\052" +
    "\uff83\053\uff83\055\uff83\056\uff83\057\uff83\060\uff83\001\002" +
    "\000\100\005\uff8e\006\uff8e\007\uff8e\012\uff8e\014\uff8e\015" +
    "\uff8e\016\uff8e\017\uff8e\021\uff8e\023\uff8e\026\uff8e\030\uff8e" +
    "\031\uff8e\032\uff8e\034\uff8e\036\uff8e\037\uff8e\040\uff8e\041" +
    "\uff8e\042\uff8e\043\uff8e\044\050\045\055\046\057\051\uff8e" +
    "\052\uff8e\053\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e\001" +
    "\002\000\100\005\uff86\006\uff86\007\uff86\012\uff86\014\uff86" +
    "\015\uff86\016\uff86\017\uff86\021\uff86\023\uff86\026\uff86\030" +
    "\uff86\031\uff86\032\uff86\034\uff86\036\uff86\037\uff86\040\052" +
    "\041\053\042\047\043\045\044\050\045\055\046\057\051" +
    "\uff86\052\uff86\053\uff86\055\uff86\056\uff86\057\uff86\060\uff86" +
    "\001\002\000\036\030\106\036\054\037\061\040\052\041" +
    "\053\042\047\043\045\044\050\045\055\046\057\055\044" +
    "\056\060\057\046\060\056\001\002\000\100\005\uff7f\006" +
    "\uff7f\007\uff7f\012\uff7f\014\uff7f\015\uff7f\016\uff7f\017\uff7f" +
    "\021\uff7f\023\uff7f\026\uff7f\030\uff7f\031\uff7f\032\uff7f\034" +
    "\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f" +
    "\044\uff7f\045\uff7f\046\uff7f\051\uff7f\052\uff7f\053\uff7f\055" +
    "\uff7f\056\uff7f\057\uff7f\060\uff7f\001\002\000\100\005\uff7d" +
    "\006\uff7d\007\uff7d\012\uff7d\014\uff7d\015\uff7d\016\uff7d\017" +
    "\uff7d\021\uff7d\023\uff7d\026\uff7d\030\uff7d\031\uff7d\032\uff7d" +
    "\034\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043" +
    "\uff7d\044\uff7d\045\uff7d\046\uff7d\051\uff7d\052\uff7d\053\uff7d" +
    "\055\uff7d\056\uff7d\057\uff7d\060\uff7d\001\002\000\100\005" +
    "\uff7e\006\uff7e\007\uff7e\012\uff7e\014\uff7e\015\uff7e\016\uff7e" +
    "\017\uff7e\021\uff7e\023\uff7e\026\uff7e\030\uff7e\031\uff7e\032" +
    "\uff7e\034\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e" +
    "\043\uff7e\044\050\045\055\046\057\051\uff7e\052\uff7e\053" +
    "\uff7e\055\uff7e\056\uff7e\057\uff7e\060\uff7e\001\002\000\020" +
    "\005\uffee\006\uffee\007\uffee\026\uffee\051\uffee\052\uffee\053" +
    "\uffee\001\002\000\010\002\ufffa\052\006\053\004\001\002" +
    "\000\020\005\ufff0\006\ufff0\007\ufff0\026\ufff0\051\ufff0\052" +
    "\ufff0\053\ufff0\001\002\000\004\002\uffff\001\002\000\010" +
    "\002\ufffb\052\006\053\004\001\002\000\010\002\ufff8\052" +
    "\ufff8\053\ufff8\001\002\000\010\002\ufff9\052\ufff9\053\ufff9" +
    "\001\002\000\006\030\126\051\127\001\002\000\024\010" +
    "\032\011\035\027\042\035\036\043\034\047\037\050\040" +
    "\051\033\054\041\001\002\000\054\005\ufff4\006\ufff4\007" +
    "\ufff4\026\ufff4\032\123\036\054\037\061\040\052\041\053" +
    "\042\047\043\045\044\050\045\055\046\057\051\ufff4\052" +
    "\ufff4\053\ufff4\055\044\056\060\057\046\060\056\001\002" +
    "\000\020\005\ufff6\006\ufff6\007\ufff6\026\ufff6\051\ufff6\052" +
    "\ufff6\053\ufff6\001\002\000\004\025\133\001\002\000\006" +
    "\030\131\031\130\001\002\000\004\025\uffea\001\002\000" +
    "\006\030\uffe8\031\uffe8\001\002\000\004\051\132\001\002" +
    "\000\004\025\uffeb\001\002\000\006\030\uffe9\031\uffe9\001" +
    "\002\000\032\005\026\006\021\007\022\012\153\014\160" +
    "\015\145\016\155\017\137\023\154\051\152\052\006\053" +
    "\004\001\002\000\036\005\uffe0\006\uffe0\007\uffe0\012\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\017\uffe0\021\uffe0\023\uffe0\026" +
    "\uffe0\051\uffe0\052\uffe0\053\uffe0\001\002\000\040\005\uffd7" +
    "\006\uffd7\007\uffd7\012\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\021\uffd7\023\uffd7\026\uffd7\030\uffd7\051\uffd7\052\uffd7" +
    "\053\uffd7\001\002\000\040\005\uffdc\006\uffdc\007\uffdc\012" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\021\uffdc\023\uffdc" +
    "\026\uffdc\030\uffdc\051\uffdc\052\uffdc\053\uffdc\001\002\000" +
    "\004\027\374\001\002\000\040\005\uffda\006\uffda\007\uffda" +
    "\012\uffda\014\uffda\015\uffda\016\uffda\017\uffda\021\uffda\023" +
    "\uffda\026\uffda\030\uffda\051\uffda\052\uffda\053\uffda\001\002" +
    "\000\040\005\uffdf\006\uffdf\007\uffdf\012\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\021\uffdf\023\uffdf\026\uffdf\030\uffdf" +
    "\051\uffdf\052\uffdf\053\uffdf\001\002\000\034\005\026\006" +
    "\021\007\022\012\153\014\160\015\145\016\155\017\137" +
    "\023\154\026\373\051\152\052\006\053\004\001\002\000" +
    "\042\005\uff97\006\uff97\007\uff97\012\uff97\013\355\014\uff97" +
    "\015\uff97\016\uff97\017\uff97\021\uff97\023\uff97\026\uff97\030" +
    "\uff97\051\uff97\052\uff97\053\uff97\001\002\000\040\005\uffd9" +
    "\006\uffd9\007\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\021\uffd9\023\uffd9\026\uffd9\030\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\001\002\000\004\027\344\001\002\000\040\005" +
    "\uffde\006\uffde\007\uffde\012\uffde\014\uffde\015\uffde\016\uffde" +
    "\017\uffde\021\uffde\023\uffde\026\uffde\030\uffde\051\uffde\052" +
    "\uffde\053\uffde\001\002\000\004\051\306\001\002\000\040" +
    "\005\uffdb\006\uffdb\007\uffdb\012\uffdb\014\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\021\uffdb\023\uffdb\026\uffdb\030\uffdb\051\uffdb" +
    "\052\uffdb\053\uffdb\001\002\000\040\005\uffd8\006\uffd8\007" +
    "\uffd8\012\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\021\uffd8" +
    "\023\uffd8\026\uffd8\030\uffd8\051\uffd8\052\uffd8\053\uffd8\001" +
    "\002\000\020\027\235\033\240\042\237\043\236\044\242" +
    "\045\243\046\241\001\002\000\004\027\226\001\002\000" +
    "\004\061\220\001\002\000\004\025\210\001\002\000\040" +
    "\005\uffdd\006\uffdd\007\uffdd\012\uffdd\014\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\021\uffdd\023\uffdd\026\uffdd\030\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\001\002\000\040\005\uffd6\006\uffd6\007" +
    "\uffd6\012\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\021\uffd6" +
    "\023\uffd6\026\uffd6\030\uffd6\051\uffd6\052\uffd6\053\uffd6\001" +
    "\002\000\004\027\161\001\002\000\012\005\026\006\021" +
    "\007\022\051\164\001\002\000\004\032\172\001\002\000" +
    "\004\051\167\001\002\000\004\033\165\001\002\000\024" +
    "\010\032\011\035\027\042\035\036\043\034\047\037\050" +
    "\040\051\033\054\041\001\002\000\036\032\uff9a\036\054" +
    "\037\061\040\052\041\053\042\047\043\045\044\050\045" +
    "\055\046\057\055\044\056\060\057\046\060\056\001\002" +
    "\000\004\033\170\001\002\000\024\010\032\011\035\027" +
    "\042\035\036\043\034\047\037\050\040\051\033\054\041" +
    "\001\002\000\036\032\uff9b\036\054\037\061\040\052\041" +
    "\053\042\047\043\045\044\050\045\055\046\057\055\044" +
    "\056\060\057\046\060\056\001\002\000\024\010\032\011" +
    "\035\027\042\035\036\043\034\047\037\050\040\051\033" +
    "\054\041\001\002\000\036\032\174\036\054\037\061\040" +
    "\052\041\053\042\047\043\045\044\050\045\055\046\057" +
    "\055\044\056\060\057\046\060\056\001\002\000\032\005" +
    "\026\006\021\007\022\012\153\014\160\015\145\016\155" +
    "\017\137\023\154\051\152\052\006\053\004\001\002\000" +
    "\004\030\176\001\002\000\004\025\177\001\002\000\034" +
    "\005\026\006\021\007\022\012\153\014\160\015\145\016" +
    "\155\017\137\021\201\023\154\051\152\052\006\053\004" +
    "\001\002\000\036\005\uffe6\006\uffe6\007\uffe6\012\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\021\uffe6\023\uffe6\026\uffe6" +
    "\051\uffe6\052\uffe6\053\uffe6\001\002\000\040\005\uffe2\006" +
    "\uffe2\007\uffe2\012\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\021\uffe2\023\uffe2\026\uffe2\032\207\051\uffe2\052\uffe2\053" +
    "\uffe2\001\002\000\036\005\026\006\021\007\022\012\153" +
    "\014\160\015\145\016\155\017\137\021\204\023\154\026" +
    "\205\051\152\052\006\053\004\001\002\000\036\005\uffe7" +
    "\006\uffe7\007\uffe7\012\uffe7\014\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\021\uffe7\023\uffe7\026\uffe7\051\uffe7\052\uffe7\053\uffe7" +
    "\001\002\000\040\005\uffe5\006\uffe5\007\uffe5\012\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\021\uffe5\023\uffe5\026\uffe5" +
    "\032\206\051\uffe5\052\uffe5\053\uffe5\001\002\000\040\005" +
    "\uff9c\006\uff9c\007\uff9c\012\uff9c\014\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\021\uff9c\023\uff9c\026\uff9c\030\uff9c\051\uff9c\052" +
    "\uff9c\053\uff9c\001\002\000\036\005\uffe4\006\uffe4\007\uffe4" +
    "\012\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\021\uffe4\023" +
    "\uffe4\026\uffe4\051\uffe4\052\uffe4\053\uffe4\001\002\000\036" +
    "\005\uffe3\006\uffe3\007\uffe3\012\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\021\uffe3\023\uffe3\026\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\001\002\000\034\005\026\006\021\007\022\012" +
    "\153\014\160\015\145\016\155\017\137\021\201\023\154" +
    "\051\152\052\006\053\004\001\002\000\036\005\026\006" +
    "\021\007\022\012\153\014\160\015\145\016\155\017\137" +
    "\021\204\023\154\026\212\051\152\052\006\053\004\001" +
    "\002\000\004\015\213\001\002\000\004\027\214\001\002" +
    "\000\024\010\032\011\035\027\042\035\036\043\034\047" +
    "\037\050\040\051\033\054\041\001\002\000\036\030\216" +
    "\036\054\037\061\040\052\041\053\042\047\043\045\044" +
    "\050\045\055\046\057\055\044\056\060\057\046\060\056" +
    "\001\002\000\042\005\uff9e\006\uff9e\007\uff9e\012\uff9e\014" +
    "\uff9e\015\uff9e\016\uff9e\017\uff9e\021\uff9e\023\uff9e\026\uff9e" +
    "\030\uff9e\032\217\051\uff9e\052\uff9e\053\uff9e\001\002\000" +
    "\040\005\uff9f\006\uff9f\007\uff9f\012\uff9f\014\uff9f\015\uff9f" +
    "\016\uff9f\017\uff9f\021\uff9f\023\uff9f\026\uff9f\030\uff9f\051" +
    "\uff9f\052\uff9f\053\uff9f\001\002\000\004\024\221\001\002" +
    "\000\004\027\222\001\002\000\024\010\032\011\035\027" +
    "\042\035\036\043\034\047\037\050\040\051\033\054\041" +
    "\001\002\000\036\030\224\036\054\037\061\040\052\041" +
    "\053\042\047\043\045\044\050\045\055\046\057\055\044" +
    "\056\060\057\046\060\056\001\002\000\042\005\uffa7\006" +
    "\uffa7\007\uffa7\012\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7" +
    "\021\uffa7\023\uffa7\026\uffa7\030\uffa7\032\225\051\uffa7\052" +
    "\uffa7\053\uffa7\001\002\000\040\005\uffa8\006\uffa8\007\uffa8" +
    "\012\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\021\uffa8\023" +
    "\uffa8\026\uffa8\030\uffa8\051\uffa8\052\uffa8\053\uffa8\001\002" +
    "\000\024\010\032\011\035\027\042\035\036\043\034\047" +
    "\037\050\040\051\033\054\041\001\002\000\036\030\230" +
    "\036\054\037\061\040\052\041\053\042\047\043\045\044" +
    "\050\045\055\046\057\055\044\056\060\057\046\060\056" +
    "\001\002\000\034\005\026\006\021\007\022\012\153\014" +
    "\160\015\145\016\155\017\137\023\154\025\232\051\152" +
    "\052\006\053\004\001\002\000\040\005\uff93\006\uff93\007" +
    "\uff93\012\uff93\014\uff93\015\uff93\016\uff93\017\uff93\021\uff93" +
    "\023\uff93\026\uff93\030\uff93\051\uff93\052\uff93\053\uff93\001" +
    "\002\000\034\005\026\006\021\007\022\012\153\014\160" +
    "\015\145\016\155\017\137\021\201\023\154\051\152\052" +
    "\006\053\004\001\002\000\036\005\026\006\021\007\022" +
    "\012\153\014\160\015\145\016\155\017\137\021\204\023" +
    "\154\026\234\051\152\052\006\053\004\001\002\000\042" +
    "\005\uff92\006\uff92\007\uff92\012\uff92\013\uff92\014\uff92\015" +
    "\uff92\016\uff92\017\uff92\021\uff92\023\uff92\026\uff92\030\uff92" +
    "\051\uff92\052\uff92\053\uff92\001\002\000\026\010\032\011" +
    "\035\027\042\030\277\035\036\043\034\047\037\050\040" +
    "\051\033\054\041\001\002\000\006\033\272\043\271\001" +
    "\002\000\006\033\265\042\264\001\002\000\026\010\032" +
    "\011\035\027\042\035\036\043\034\047\037\050\040\051" +
    "\033\054\041\062\255\001\002\000\004\033\252\001\002" +
    "\000\004\033\247\001\002\000\004\033\244\001\002\000" +
    "\024\010\032\011\035\027\042\035\036\043\034\047\037" +
    "\050\040\051\033\054\041\001\002\000\074\005\uffc9\006" +
    "\uffc9\007\uffc9\012\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9" +
    "\021\uffc9\023\uffc9\026\uffc9\030\uffc9\032\246\036\054\037" +
    "\061\040\052\041\053\042\047\043\045\044\050\045\055" +
    "\046\057\051\uffc9\052\uffc9\053\uffc9\055\044\056\060\057" +
    "\046\060\056\001\002\000\040\005\uffbf\006\uffbf\007\uffbf" +
    "\012\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\021\uffbf\023" +
    "\uffbf\026\uffbf\030\uffbf\051\uffbf\052\uffbf\053\uffbf\001\002" +
    "\000\024\010\032\011\035\027\042\035\036\043\034\047" +
    "\037\050\040\051\033\054\041\001\002\000\074\005\uffca" +
    "\006\uffca\007\uffca\012\uffca\014\uffca\015\uffca\016\uffca\017" +
    "\uffca\021\uffca\023\uffca\026\uffca\030\uffca\032\251\036\054" +
    "\037\061\040\052\041\053\042\047\043\045\044\050\045" +
    "\055\046\057\051\uffca\052\uffca\053\uffca\055\044\056\060" +
    "\057\046\060\056\001\002\000\040\005\uffc0\006\uffc0\007" +
    "\uffc0\012\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\021\uffc0" +
    "\023\uffc0\026\uffc0\030\uffc0\051\uffc0\052\uffc0\053\uffc0\001" +
    "\002\000\024\010\032\011\035\027\042\035\036\043\034" +
    "\047\037\050\040\051\033\054\041\001\002\000\074\005" +
    "\uffc6\006\uffc6\007\uffc6\012\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\021\uffc6\023\uffc6\026\uffc6\030\uffc6\032\254\036" +
    "\054\037\061\040\052\041\053\042\047\043\045\044\050" +
    "\045\055\046\057\051\uffc6\052\uffc6\053\uffc6\055\044\056" +
    "\060\057\046\060\056\001\002\000\040\005\uffbc\006\uffbc" +
    "\007\uffbc\012\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\021" +
    "\uffbc\023\uffbc\026\uffbc\030\uffbc\051\uffbc\052\uffbc\053\uffbc" +
    "\001\002\000\004\027\260\001\002\000\074\005\uffd2\006" +
    "\uffd2\007\uffd2\012\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\021\uffd2\023\uffd2\026\uffd2\030\uffd2\032\257\036\054\037" +
    "\061\040\052\041\053\042\047\043\045\044\050\045\055" +
    "\046\057\051\uffd2\052\uffd2\053\uffd2\055\044\056\060\057" +
    "\046\060\056\001\002\000\040\005\uffd4\006\uffd4\007\uffd4" +
    "\012\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\021\uffd4\023" +
    "\uffd4\026\uffd4\030\uffd4\051\uffd4\052\uffd4\053\uffd4\001\002" +
    "\000\004\047\261\001\002\000\004\030\262\001\002\000" +
    "\042\005\uffb2\006\uffb2\007\uffb2\012\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\021\uffb2\023\uffb2\026\uffb2\030\uffb2\032" +
    "\263\051\uffb2\052\uffb2\053\uffb2\001\002\000\040\005\uffb1" +
    "\006\uffb1\007\uffb1\012\uffb1\014\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\021\uffb1\023\uffb1\026\uffb1\030\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\001\002\000\042\005\uffbb\006\uffbb\007\uffbb\012" +
    "\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\021\uffbb\023\uffbb" +
    "\026\uffbb\030\uffbb\032\270\051\uffbb\052\uffbb\053\uffbb\001" +
    "\002\000\024\010\032\011\035\027\042\035\036\043\034" +
    "\047\037\050\040\051\033\054\041\001\002\000\074\005" +
    "\uffc8\006\uffc8\007\uffc8\012\uffc8\014\uffc8\015\uffc8\016\uffc8" +
    "\017\uffc8\021\uffc8\023\uffc8\026\uffc8\030\uffc8\032\267\036" +
    "\054\037\061\040\052\041\053\042\047\043\045\044\050" +
    "\045\055\046\057\051\uffc8\052\uffc8\053\uffc8\055\044\056" +
    "\060\057\046\060\056\001\002\000\040\005\uffbe\006\uffbe" +
    "\007\uffbe\012\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\021" +
    "\uffbe\023\uffbe\026\uffbe\030\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\001\002\000\040\005\uffba\006\uffba\007\uffba\012\uffba\014" +
    "\uffba\015\uffba\016\uffba\017\uffba\021\uffba\023\uffba\026\uffba" +
    "\030\uffba\051\uffba\052\uffba\053\uffba\001\002\000\042\005" +
    "\uffb9\006\uffb9\007\uffb9\012\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\021\uffb9\023\uffb9\026\uffb9\030\uffb9\032\275\051" +
    "\uffb9\052\uffb9\053\uffb9\001\002\000\024\010\032\011\035" +
    "\027\042\035\036\043\034\047\037\050\040\051\033\054" +
    "\041\001\002\000\074\005\uffc7\006\uffc7\007\uffc7\012\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\017\uffc7\021\uffc7\023\uffc7\026" +
    "\uffc7\030\uffc7\032\274\036\054\037\061\040\052\041\053" +
    "\042\047\043\045\044\050\045\055\046\057\051\uffc7\052" +
    "\uffc7\053\uffc7\055\044\056\060\057\046\060\056\001\002" +
    "\000\040\005\uffbd\006\uffbd\007\uffbd\012\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\021\uffbd\023\uffbd\026\uffbd\030\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\001\002\000\040\005\uffb8\006" +
    "\uffb8\007\uffb8\012\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\021\uffb8\023\uffb8\026\uffb8\030\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\001\002\000\006\030\304\031\303\001\002\000\042" +
    "\005\uffad\006\uffad\007\uffad\012\uffad\014\uffad\015\uffad\016" +
    "\uffad\017\uffad\021\uffad\023\uffad\026\uffad\030\uffad\032\uffad" +
    "\051\uffad\052\uffad\053\uffad\001\002\000\042\005\uffaf\006" +
    "\uffaf\007\uffaf\012\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf" +
    "\021\uffaf\023\uffaf\026\uffaf\030\uffaf\032\302\051\uffaf\052" +
    "\uffaf\053\uffaf\001\002\000\040\030\uffab\031\uffab\036\054" +
    "\037\061\040\052\041\053\042\047\043\045\044\050\045" +
    "\055\046\057\055\044\056\060\057\046\060\056\001\002" +
    "\000\040\005\uffb0\006\uffb0\007\uffb0\012\uffb0\014\uffb0\015" +
    "\uffb0\016\uffb0\017\uffb0\021\uffb0\023\uffb0\026\uffb0\030\uffb0" +
    "\051\uffb0\052\uffb0\053\uffb0\001\002\000\024\010\032\011" +
    "\035\027\042\035\036\043\034\047\037\050\040\051\033" +
    "\054\041\001\002\000\042\005\uffae\006\uffae\007\uffae\012" +
    "\uffae\014\uffae\015\uffae\016\uffae\017\uffae\021\uffae\023\uffae" +
    "\026\uffae\030\uffae\032\uffae\051\uffae\052\uffae\053\uffae\001" +
    "\002\000\040\030\uffac\031\uffac\036\054\037\061\040\052" +
    "\041\053\042\047\043\045\044\050\045\055\046\057\055" +
    "\044\056\060\057\046\060\056\001\002\000\056\005\uffd0" +
    "\006\uffd0\007\uffd0\012\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\021\uffd0\023\uffd0\026\uffd0\030\uffd0\032\314\033\311" +
    "\042\310\043\307\044\313\045\315\046\312\051\uffd0\052" +
    "\uffd0\053\uffd0\001\002\000\004\033\341\001\002\000\004" +
    "\033\336\001\002\000\026\010\032\011\035\027\042\035" +
    "\036\043\034\047\037\050\040\051\033\054\041\062\327" +
    "\001\002\000\004\033\324\001\002\000\004\033\321\001" +
    "\002\000\040\005\uffd1\006\uffd1\007\uffd1\012\uffd1\014\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\021\uffd1\023\uffd1\026\uffd1\030" +
    "\uffd1\051\uffd1\052\uffd1\053\uffd1\001\002\000\004\033\316" +
    "\001\002\000\024\010\032\011\035\027\042\035\036\043" +
    "\034\047\037\050\040\051\033\054\041\001\002\000\074" +
    "\005\uffce\006\uffce\007\uffce\012\uffce\014\uffce\015\uffce\016" +
    "\uffce\017\uffce\021\uffce\023\uffce\026\uffce\030\uffce\032\320" +
    "\036\054\037\061\040\052\041\053\042\047\043\045\044" +
    "\050\045\055\046\057\051\uffce\052\uffce\053\uffce\055\044" +
    "\056\060\057\046\060\056\001\002\000\040\005\uffc4\006" +
    "\uffc4\007\uffc4\012\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4" +
    "\021\uffc4\023\uffc4\026\uffc4\030\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\001\002\000\024\010\032\011\035\027\042\035\036" +
    "\043\034\047\037\050\040\051\033\054\041\001\002\000" +
    "\074\005\uffcf\006\uffcf\007\uffcf\012\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\021\uffcf\023\uffcf\026\uffcf\030\uffcf\032" +
    "\323\036\054\037\061\040\052\041\053\042\047\043\045" +
    "\044\050\045\055\046\057\051\uffcf\052\uffcf\053\uffcf\055" +
    "\044\056\060\057\046\060\056\001\002\000\040\005\uffc5" +
    "\006\uffc5\007\uffc5\012\uffc5\014\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\021\uffc5\023\uffc5\026\uffc5\030\uffc5\051\uffc5\052\uffc5" +
    "\053\uffc5\001\002\000\024\010\032\011\035\027\042\035" +
    "\036\043\034\047\037\050\040\051\033\054\041\001\002" +
    "\000\074\005\uffcb\006\uffcb\007\uffcb\012\uffcb\014\uffcb\015" +
    "\uffcb\016\uffcb\017\uffcb\021\uffcb\023\uffcb\026\uffcb\030\uffcb" +
    "\032\326\036\054\037\061\040\052\041\053\042\047\043" +
    "\045\044\050\045\055\046\057\051\uffcb\052\uffcb\053\uffcb" +
    "\055\044\056\060\057\046\060\056\001\002\000\040\005" +
    "\uffc1\006\uffc1\007\uffc1\012\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\021\uffc1\023\uffc1\026\uffc1\030\uffc1\051\uffc1\052" +
    "\uffc1\053\uffc1\001\002\000\004\027\332\001\002\000\074" +
    "\005\uffd3\006\uffd3\007\uffd3\012\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\017\uffd3\021\uffd3\023\uffd3\026\uffd3\030\uffd3\032\331" +
    "\036\054\037\061\040\052\041\053\042\047\043\045\044" +
    "\050\045\055\046\057\051\uffd3\052\uffd3\053\uffd3\055\044" +
    "\056\060\057\046\060\056\001\002\000\040\005\uffd5\006" +
    "\uffd5\007\uffd5\012\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\021\uffd5\023\uffd5\026\uffd5\030\uffd5\051\uffd5\052\uffd5\053" +
    "\uffd5\001\002\000\004\047\333\001\002\000\004\030\334" +
    "\001\002\000\042\005\uffb3\006\uffb3\007\uffb3\012\uffb3\014" +
    "\uffb3\015\uffb3\016\uffb3\017\uffb3\021\uffb3\023\uffb3\026\uffb3" +
    "\030\uffb3\032\335\051\uffb3\052\uffb3\053\uffb3\001\002\000" +
    "\040\005\uffb4\006\uffb4\007\uffb4\012\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\017\uffb4\021\uffb4\023\uffb4\026\uffb4\030\uffb4\051" +
    "\uffb4\052\uffb4\053\uffb4\001\002\000\024\010\032\011\035" +
    "\027\042\035\036\043\034\047\037\050\040\051\033\054" +
    "\041\001\002\000\074\005\uffcd\006\uffcd\007\uffcd\012\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\017\uffcd\021\uffcd\023\uffcd\026" +
    "\uffcd\030\uffcd\032\340\036\054\037\061\040\052\041\053" +
    "\042\047\043\045\044\050\045\055\046\057\051\uffcd\052" +
    "\uffcd\053\uffcd\055\044\056\060\057\046\060\056\001\002" +
    "\000\040\005\uffc3\006\uffc3\007\uffc3\012\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\021\uffc3\023\uffc3\026\uffc3\030\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\001\002\000\024\010\032\011" +
    "\035\027\042\035\036\043\034\047\037\050\040\051\033" +
    "\054\041\001\002\000\074\005\uffcc\006\uffcc\007\uffcc\012" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\021\uffcc\023\uffcc" +
    "\026\uffcc\030\uffcc\032\343\036\054\037\061\040\052\041" +
    "\053\042\047\043\045\044\050\045\055\046\057\051\uffcc" +
    "\052\uffcc\053\uffcc\055\044\056\060\057\046\060\056\001" +
    "\002\000\040\005\uffc2\006\uffc2\007\uffc2\012\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\021\uffc2\023\uffc2\026\uffc2\030" +
    "\uffc2\051\uffc2\052\uffc2\053\uffc2\001\002\000\024\010\032" +
    "\011\035\027\042\035\036\043\034\047\037\050\040\051" +
    "\033\054\041\001\002\000\036\030\346\036\054\037\061" +
    "\040\052\041\053\042\047\043\045\044\050\045\055\046" +
    "\057\055\044\056\060\057\046\060\056\001\002\000\004" +
    "\025\347\001\002\000\034\005\026\006\021\007\022\012" +
    "\153\014\160\015\145\016\155\017\137\021\201\023\154" +
    "\051\152\052\006\053\004\001\002\000\036\005\026\006" +
    "\021\007\022\012\153\014\160\015\145\016\155\017\137" +
    "\021\204\023\154\026\351\051\152\052\006\053\004\001" +
    "\002\000\040\005\uff9d\006\uff9d\007\uff9d\012\uff9d\014\uff9d" +
    "\015\uff9d\016\uff9d\017\uff9d\021\uff9d\023\uff9d\026\uff9d\030" +
    "\uff9d\051\uff9d\052\uff9d\053\uff9d\001\002\000\040\005\uff96" +
    "\006\uff96\007\uff96\012\uff96\014\uff96\015\uff96\016\uff96\017" +
    "\uff96\021\uff96\023\uff96\026\uff96\030\uff96\051\uff96\052\uff96" +
    "\053\uff96\001\002\000\042\005\uff98\006\uff98\007\uff98\012" +
    "\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\021\uff98" +
    "\023\uff98\026\uff98\030\uff98\051\uff98\052\uff98\053\uff98\001" +
    "\002\000\042\005\uff94\006\uff94\007\uff94\012\uff94\013\355" +
    "\014\uff94\015\uff94\016\uff94\017\uff94\021\uff94\023\uff94\026" +
    "\uff94\030\uff94\051\uff94\052\uff94\053\uff94\001\002\000\006" +
    "\012\356\025\357\001\002\000\004\027\362\001\002\000" +
    "\034\005\026\006\021\007\022\012\153\014\160\015\145" +
    "\016\155\017\137\021\201\023\154\051\152\052\006\053" +
    "\004\001\002\000\036\005\026\006\021\007\022\012\153" +
    "\014\160\015\145\016\155\017\137\021\204\023\154\026" +
    "\361\051\152\052\006\053\004\001\002\000\040\005\uff91" +
    "\006\uff91\007\uff91\012\uff91\014\uff91\015\uff91\016\uff91\017" +
    "\uff91\021\uff91\023\uff91\026\uff91\030\uff91\051\uff91\052\uff91" +
    "\053\uff91\001\002\000\024\010\032\011\035\027\042\035" +
    "\036\043\034\047\037\050\040\051\033\054\041\001\002" +
    "\000\036\030\364\036\054\037\061\040\052\041\053\042" +
    "\047\043\045\044\050\045\055\046\057\055\044\056\060" +
    "\057\046\060\056\001\002\000\004\025\365\001\002\000" +
    "\034\005\026\006\021\007\022\012\153\014\160\015\145" +
    "\016\155\017\137\021\201\023\154\051\152\052\006\053" +
    "\004\001\002\000\036\005\026\006\021\007\022\012\153" +
    "\014\160\015\145\016\155\017\137\021\204\023\154\026" +
    "\367\051\152\052\006\053\004\001\002\000\042\005\uff90" +
    "\006\uff90\007\uff90\012\uff90\013\uff90\014\uff90\015\uff90\016" +
    "\uff90\017\uff90\021\uff90\023\uff90\026\uff90\030\uff90\051\uff90" +
    "\052\uff90\053\uff90\001\002\000\040\005\uff95\006\uff95\007" +
    "\uff95\012\uff95\014\uff95\015\uff95\016\uff95\017\uff95\021\uff95" +
    "\023\uff95\026\uff95\030\uff95\051\uff95\052\uff95\053\uff95\001" +
    "\002\000\042\005\uff99\006\uff99\007\uff99\012\uff99\013\uff99" +
    "\014\uff99\015\uff99\016\uff99\017\uff99\021\uff99\023\uff99\026" +
    "\uff99\030\uff99\051\uff99\052\uff99\053\uff99\001\002\000\036" +
    "\005\uffe1\006\uffe1\007\uffe1\012\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\021\uffe1\023\uffe1\026\uffe1\051\uffe1\052\uffe1" +
    "\053\uffe1\001\002\000\020\005\uffec\006\uffec\007\uffec\026" +
    "\uffec\051\uffec\052\uffec\053\uffec\001\002\000\004\051\375" +
    "\001\002\000\004\030\376\001\002\000\004\025\377\001" +
    "\002\000\004\020\u0101\001\002\000\010\020\u0101\022\u010a" +
    "\026\u0109\001\002\000\024\010\032\011\035\027\042\035" +
    "\036\043\034\047\037\050\040\051\033\054\041\001\002" +
    "\000\010\020\uffa4\022\uffa4\026\uffa4\001\002\000\036\034" +
    "\u0104\036\054\037\061\040\052\041\053\042\047\043\045" +
    "\044\050\045\055\046\057\055\044\056\060\057\046\060" +
    "\056\001\002\000\032\005\026\006\021\007\022\012\153" +
    "\014\160\015\145\016\155\017\137\023\154\051\152\052" +
    "\006\053\004\001\002\000\034\005\026\006\021\007\022" +
    "\012\153\014\160\015\145\016\155\017\137\021\u0106\023" +
    "\154\051\152\052\006\053\004\001\002\000\012\020\uffa2" +
    "\022\uffa2\026\uffa2\032\u0107\001\002\000\010\020\uffa3\022" +
    "\uffa3\026\uffa3\001\002\000\040\005\uffa6\006\uffa6\007\uffa6" +
    "\012\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\021\uffa6\023" +
    "\uffa6\026\uffa6\030\uffa6\051\uffa6\052\uffa6\053\uffa6\001\002" +
    "\000\040\005\uffa0\006\uffa0\007\uffa0\012\uffa0\014\uffa0\015" +
    "\uffa0\016\uffa0\017\uffa0\021\uffa0\023\uffa0\026\uffa0\030\uffa0" +
    "\051\uffa0\052\uffa0\053\uffa0\001\002\000\004\034\u010c\001" +
    "\002\000\010\020\uffa5\022\uffa5\026\uffa5\001\002\000\034" +
    "\005\026\006\021\007\022\012\153\014\160\015\145\016" +
    "\155\017\137\021\201\023\154\051\152\052\006\053\004" +
    "\001\002\000\036\005\026\006\021\007\022\012\153\014" +
    "\160\015\145\016\155\017\137\021\204\023\154\026\u010e" +
    "\051\152\052\006\053\004\001\002\000\040\005\uffa1\006" +
    "\uffa1\007\uffa1\012\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1" +
    "\021\uffa1\023\uffa1\026\uffa1\030\uffa1\051\uffa1\052\uffa1\053" +
    "\uffa1\001\002\000\010\051\ufffd\052\ufffd\053\ufffd\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\012\002\006\003\011\034\007\042\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\017\005\024\014\022\034\023\041\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\112" +
    "\014\022\034\023\041\110\043\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\107\001\001\000\002\001" +
    "\001\000\004\026\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\104\001\001\000" +
    "\002\001\001\000\004\026\103\001\001\000\004\026\102" +
    "\001\001\000\004\026\101\001\001\000\004\026\076\001" +
    "\001\000\004\026\072\001\001\000\002\001\001\000\004" +
    "\026\070\001\001\000\004\026\067\001\001\000\004\026" +
    "\066\001\001\000\004\026\065\001\001\000\004\026\064" +
    "\001\001\000\004\026\063\001\001\000\004\026\062\001" +
    "\001\000\004\026\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\075\001\001\000\002\001\001\000\004\026" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\034\115\044\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\124" +
    "\012\123\001\001\000\004\026\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\007\140\010\141" +
    "\013\133\014\146\015\142\020\145\022\155\023\135\024" +
    "\147\025\137\033\143\034\150\035\134\040\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\007\140\013\371\014\146\015\142\020\145\022\155\023" +
    "\135\024\147\025\137\033\143\034\150\035\134\040\156" +
    "\001\001\000\010\016\351\017\352\021\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\162\027\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\170\001\001" +
    "\000\002\001\001\000\004\026\172\001\001\000\002\001" +
    "\001\000\034\007\140\013\174\014\146\015\142\020\145" +
    "\022\155\023\135\024\147\025\137\033\143\034\150\035" +
    "\134\040\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\007\140\011\201\013\177\014\146\015\142\020" +
    "\145\022\155\023\135\024\147\025\137\033\143\034\150" +
    "\035\134\040\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\007\140\013\202\014\146\015\142\020\145" +
    "\022\155\023\135\024\147\025\137\033\143\034\150\035" +
    "\134\040\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\007\140\011\210\013\177\014\146\015\142\020\145" +
    "\022\155\023\135\024\147\025\137\033\143\034\150\035" +
    "\134\040\156\001\001\000\034\007\140\013\202\014\146" +
    "\015\142\020\145\022\155\023\135\024\147\025\137\033" +
    "\143\034\150\035\134\040\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\226" +
    "\001\001\000\002\001\001\000\034\007\140\013\230\014" +
    "\146\015\142\020\145\022\155\023\135\024\147\025\137" +
    "\033\143\034\150\035\134\040\156\001\001\000\002\001" +
    "\001\000\036\007\140\011\232\013\177\014\146\015\142" +
    "\020\145\022\155\023\135\024\147\025\137\033\143\034" +
    "\150\035\134\040\156\001\001\000\034\007\140\013\202" +
    "\014\146\015\142\020\145\022\155\023\135\024\147\025" +
    "\137\033\143\034\150\035\134\040\156\001\001\000\002" +
    "\001\001\000\010\026\300\036\275\037\277\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\244\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\265\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\327\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\316\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\324\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\336\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\341\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\344\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\007\140\011\347" +
    "\013\177\014\146\015\142\020\145\022\155\023\135\024" +
    "\147\025\137\033\143\034\150\035\134\040\156\001\001" +
    "\000\034\007\140\013\202\014\146\015\142\020\145\022" +
    "\155\023\135\024\147\025\137\033\143\034\150\035\134" +
    "\040\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\367\017\370\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\007\140\011\357\013" +
    "\177\014\146\015\142\020\145\022\155\023\135\024\147" +
    "\025\137\033\143\034\150\035\134\040\156\001\001\000" +
    "\034\007\140\013\202\014\146\015\142\020\145\022\155" +
    "\023\135\024\147\025\137\033\143\034\150\035\134\040" +
    "\156\001\001\000\002\001\001\000\004\026\362\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\007\140\011" +
    "\365\013\177\014\146\015\142\020\145\022\155\023\135" +
    "\024\147\025\137\033\143\034\150\035\134\040\156\001" +
    "\001\000\034\007\140\013\202\014\146\015\142\020\145" +
    "\022\155\023\135\024\147\025\137\033\143\034\150\035" +
    "\134\040\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\u0101\031\377\001\001\000\006\030\u010a\032\u0107\001" +
    "\001\000\004\026\u0102\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\007\140\010\u0104\013\133\014\146\015" +
    "\142\020\145\022\155\023\135\024\147\025\137\033\143" +
    "\034\150\035\134\040\156\001\001\000\034\007\140\013" +
    "\371\014\146\015\142\020\145\022\155\023\135\024\147" +
    "\025\137\033\143\034\150\035\134\040\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\007" +
    "\140\011\u010c\013\177\014\146\015\142\020\145\022\155" +
    "\023\135\024\147\025\137\033\143\034\150\035\134\040" +
    "\156\001\001\000\034\007\140\013\202\014\146\015\142" +
    "\020\145\022\155\023\135\024\147\025\137\033\143\034" +
    "\150\035\134\040\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserA2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserA2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserA2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static int cidm=0;
    public static int cidv=0;
    public static int ccpa=0;
    public static int cco=0;
    public static String idclase;
    public static int lineasclase;
    public static String vcomentarios[]=new String[100];
    public static String idmetodos[]=new String[100];
    public static int cantparemetro[]=new int[100];
    public static int lineasmetodo[]=new int[100];
    public static String idvariables[]=new String[200];

    public static void gMetodos(int cont, String nombre, int cant,int lineas){
        idmetodos[cont]=nombre;
        cantparemetro[cont]=cant;
        lineasmetodo[cont]=lineas;
        
    }
    public static void gVariable(int cont,String nombre){
        idvariables[cont]=nombre;
    }
    public static void ccomentario(int cont, String comen){
        vcomentarios[cont]=comen;
    }
 

    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserA2$actions {
  private final parserA2 parser;

  /** Constructor */
  CUP$parserA2$actions(parserA2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserA2$do_action_part00000000(
    int                        CUP$parserA2$act_num,
    java_cup.runtime.lr_parser CUP$parserA2$parser,
    java.util.Stack            CUP$parserA2$stack,
    int                        CUP$parserA2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserA2$result;

      /* select the action based on the action number */
      switch (CUP$parserA2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)).value;
		RESULT = start_val;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserA2$parser.done_parsing();
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CLASE 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASE ::= FUERA id llavea FUNCIONES FUERA2 
            {
              String RESULT =null;
		int vacleft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).left;
		int vacright = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).right;
                int vacleft2 = ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()).left;
		int clineas= (vacleft2-vacleft-1);
		String vac = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).value;
		idclase=vac;
                lineasclase=clineas;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("CLASE",1, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUERA ::= FUERA COMENTARIOS 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("FUERA",32, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUERA ::= COMENTARIOS classe 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("FUERA",32, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUERA ::= classe 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("FUERA",32, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUERA2 ::= llavec FUERA3 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("FUERA2",33, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUERA2 ::= llavec 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("FUERA2",33, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUERA3 ::= FUERA3 COMENTARIOS 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("FUERA3",34, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUERA3 ::= COMENTARIOS 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("FUERA3",34, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LINFUERA ::= TIPO id igual EXP pcoma 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINFUERA",31, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LINFUERA ::= id igual EXP pcoma 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINFUERA",31, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LINFUERA ::= TIPO id igual EXP 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINFUERA",31, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LINFUERA ::= id igual EXP 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINFUERA",31, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LINFUERA ::= TIPO id pcoma 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINFUERA",31, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LINFUERA ::= TIPO id 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.peek()).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINFUERA",31, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LINFUERA ::= COMENTARIOS 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINFUERA",31, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCIONES ::= FUNCION 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCIONES ::= FUNCIONES LINFUERA 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCIONES ::= LINFUERA 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCION ::= id parentesisa PARAMETROS llavea LINEAS llavec 
            {
              String RESULT =null;
		int vaileft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-5)).left;
		int vairight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-5)).right;
                int vaileft2 = ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()).left;
		int clineas= (vaileft2-vaileft-1);
                String vai = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-5)).value;
                gMetodos(cidm,vai,ccpa,clineas);ccpa=0;cidm++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("FUNCION",3, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-5)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMETROS ::= VARIABLES parentesisc 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("PARAMETROS",8, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMETROS ::= parentesisc 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("PARAMETROS",8, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VARIABLES ::= VARIABLES coma id 
            {
              String RESULT =null;
		ccpa++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLES",4, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VARIABLES ::= id 
            {
              String RESULT =null;
		ccpa++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLES",4, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LINEAS2 ::= LINEAS2 LINEA 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEAS2",7, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LINEAS2 ::= LINEA 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEAS2",7, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LINEAS2 ::= LINEAS2 breakk 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEAS2",7, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LINEAS2 ::= LINEAS2 breakk pcoma 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEAS2",7, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LINEAS2 ::= breakk pcoma 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEAS2",7, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LINEAS2 ::= breakk 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEAS2",7, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LINEAS ::= LINEAS LINEA 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEAS",6, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LINEAS ::= LINEA 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEAS",6, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LINEA ::= VARIABLE 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",9, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LINEA ::= IFS 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",9, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LINEA ::= FOR 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",9, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LINEA ::= WHILE 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",9, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LINEA ::= DO 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",9, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LINEA ::= SWITCH 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",9, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LINEA ::= CONSOLA 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",9, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LINEA ::= COMENTARIOS 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",9, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LINEA ::= LLAMADA 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",9, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LINEA ::= IMPORTAR 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LINEA",9, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VARIABLE ::= TIPO id igual EXP pcoma 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VARIABLE ::= id igual EXP pcoma 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VARIABLE ::= TIPO id igual EXP 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VARIABLE ::= id igual EXP 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VARIABLE ::= TIPO id pcoma 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARIABLE ::= TIPO id 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.peek()).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VARIABLE ::= TIPO id multiplicacion igual EXP 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VARIABLE ::= TIPO id division igual EXP 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VARIABLE ::= TIPO id suma igual EXP 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VARIABLE ::= TIPO id resta igual EXP 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARIABLE ::= TIPO id modulo igual EXP 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VARIABLE ::= id multiplicacion igual EXP 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VARIABLE ::= id division igual EXP 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VARIABLE ::= id suma igual EXP 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VARIABLE ::= id resta igual EXP 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VARIABLE ::= id modulo igual EXP 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VARIABLE ::= TIPO id multiplicacion igual EXP pcoma 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-5)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VARIABLE ::= TIPO id division igual EXP pcoma 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-5)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VARIABLE ::= TIPO id suma igual EXP pcoma 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-5)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VARIABLE ::= TIPO id resta igual EXP pcoma 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-5)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VARIABLE ::= TIPO id modulo igual EXP pcoma 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-5)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VARIABLE ::= id multiplicacion igual EXP pcoma 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VARIABLE ::= id division igual EXP pcoma 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VARIABLE ::= id suma igual EXP pcoma 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VARIABLE ::= id resta igual EXP pcoma 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VARIABLE ::= id modulo igual EXP pcoma 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VARIABLE ::= id suma suma 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VARIABLE ::= id suma suma pcoma 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VARIABLE ::= id resta resta 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VARIABLE ::= id resta resta pcoma 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TIPO ::= var 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPO ::= let 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPO ::= constt 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IMPORTAR ::= TIPO id igual require parentesisa cadena parentesisc pcoma 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-6)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-6)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-6)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("IMPORTAR",30, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-7)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IMPORTAR ::= TIPO id igual require parentesisa cadena parentesisc 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-5)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-5)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-5)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("IMPORTAR",30, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-6)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IMPORTAR ::= id igual require parentesisa cadena parentesisc 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-5)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-5)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-5)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("IMPORTAR",30, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-5)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IMPORTAR ::= id igual require parentesisa cadena parentesisc pcoma 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-6)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-6)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-6)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("IMPORTAR",30, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-6)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LLAMADA ::= id parentesisa PARAMETROS2 pcoma 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LLAMADA",27, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LLAMADA ::= id parentesisa PARAMETROS2 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("LLAMADA",27, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PARAMETROS2 ::= ENVIAR parentesisc 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",29, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PARAMETROS2 ::= parentesisc 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",29, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ENVIAR ::= ENVIAR coma EXP 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("ENVIAR",28, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ENVIAR ::= EXP 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("ENVIAR",28, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // COMENTARIOS ::= comentarioo 
            {
              String RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.peek()).value;
		ccomentario(cco,ca);cco++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",26, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // COMENTARIOS ::= comentarioomu 
            {
              String RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.peek()).value;
		ccomentario(cco,ca);cco++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",26, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONSOLA ::= console punto log parentesisa EXP parentesisc pcoma 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("CONSOLA",25, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-6)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONSOLA ::= console punto log parentesisa EXP parentesisc 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("CONSOLA",25, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-5)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SWITCH ::= switchh parentesisa id parentesisc llavea CASES DEFAULT 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("SWITCH",19, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-6)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CASES ::= CASES CASE 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("CASES",23, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CASES ::= CASE 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("CASES",23, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CASE ::= casee EXP dpuntos LINEAS breakk pcoma 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("CASE",22, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-5)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CASE ::= casee EXP dpuntos LINEAS breakk 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("CASE",22, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DEFAULT ::= defaultt dpuntos LINEAS2 llavec 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("DEFAULT",24, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DEFAULT ::= llavec 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("DEFAULT",24, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DO ::= doo llavea LINEAS2 llavec whilee parentesisa EXP parentesisc pcoma 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("DO",18, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-8)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DO ::= doo llavea LINEAS2 llavec whilee parentesisa EXP parentesisc 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("DO",18, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-7)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // WHILE ::= whilee parentesisa EXP parentesisc llavea LINEAS2 llavec 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("WHILE",17, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-6)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FOR ::= forr parentesisa INICIALIZADOR pcoma EXP pcoma LINEA parentesisc llavea LINEAS2 llavec 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("FOR",16, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-10)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // INICIALIZADOR ::= TIPO id igual EXP 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("INICIALIZADOR",21, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INICIALIZADOR ::= id igual EXP 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("INICIALIZADOR",21, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ELIFS ::= ELIFS ELIF 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("ELIFS",15, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ELIFS ::= ELIF 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("ELIFS",15, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // IFS ::= IF 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("IFS",14, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // IFS ::= IF ELSE 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("IFS",14, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // IFS ::= IF ELIFS ELSE 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("IFS",14, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // IFS ::= IF ELIFS 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("IFS",14, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // IFS ::= iff parentesisa EXP parentesisc LINEA 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("IFS",14, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-4)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // IF ::= iff parentesisa EXP parentesisc llavea LINEAS2 llavec 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-6)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ELSE ::= elsee llavea LINEAS2 llavec 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("ELSE",12, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ELIF ::= elsee iff parentesisa EXP parentesisc llavea LINEAS2 llavec 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("ELIF",13, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-7)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP ::= EXP suma EXP 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXP ::= EXP resta EXP 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXP ::= EXP multiplicacion EXP 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXP ::= EXP division EXP 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXP ::= EXP multiplicacion multiplicacion EXP 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXP ::= EXP modulo EXP 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXP ::= EXP multiplicacion igual EXP 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXP ::= EXP suma igual EXP 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-3)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXP ::= EXP menor EXP 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXP ::= EXP meigual EXP 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXP ::= EXP mayor EXP 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXP ::= EXP maigual EXP 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXP ::= EXP diferencia EXP 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXP ::= EXP igualacion EXP 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXP ::= EXP orr EXP 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXP ::= EXP andd EXP 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXP ::= parentesisa EXP parentesisc 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-2)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXP ::= resta EXP 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXP ::= not EXP 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.elementAt(CUP$parserA2$top-1)), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXP ::= decimal 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXP ::= cadena 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXP ::= id 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA2$stack.peek()).value;
		gVariable(cidv,va);cidv++;
              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXP ::= caracter 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXP ::= truee 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXP ::= falsee 
            {
              String RESULT =null;

              CUP$parserA2$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA2$stack.peek()), RESULT);
            }
          return CUP$parserA2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserA2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserA2$do_action(
    int                        CUP$parserA2$act_num,
    java_cup.runtime.lr_parser CUP$parserA2$parser,
    java.util.Stack            CUP$parserA2$stack,
    int                        CUP$parserA2$top)
    throws java.lang.Exception
    {
              return CUP$parserA2$do_action_part00000000(
                               CUP$parserA2$act_num,
                               CUP$parserA2$parser,
                               CUP$parserA2$stack,
                               CUP$parserA2$top);
    }
}

}
