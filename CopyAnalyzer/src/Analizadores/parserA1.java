
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import copyanalyzer.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserA1 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserA1() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserA1(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserA1(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\003\000\002\004" +
    "\006\000\002\021\004\000\002\021\004\000\002\021\004" +
    "\000\002\021\004\000\002\021\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\003\000\002\020\005\000\002\017\010\000\002\017" +
    "\010\000\002\017\004\000\002\017\003\000\002\022\011" +
    "\000\002\005\005\000\002\006\007\000\002\006\007\000" +
    "\002\006\004\000\002\006\003\000\002\011\005\000\002" +
    "\014\007\000\002\014\011\000\002\014\011\000\002\014" +
    "\004\000\002\014\003\000\002\016\005\000\002\013\007" +
    "\000\002\013\011\000\002\013\011\000\002\013\007\000" +
    "\002\013\007\000\002\013\004\000\002\013\003\000\002" +
    "\007\005\000\002\007\003\000\002\010\005\000\002\010" +
    "\003\000\002\003\003\000\002\003\003\000\002\012\003" +
    "\000\002\012\003\000\002\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\004\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\216\001\002\000\004\020\007\001\002" +
    "\000\004\005\010\001\002\000\004\020\175\001\002\000" +
    "\016\006\012\007\014\010\013\011\023\041\015\042\017" +
    "\001\002\000\004\022\167\001\002\000\004\020\137\001" +
    "\002\000\004\020\065\001\002\000\040\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\021\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\001\002\000\016\007\014\010\013\011\023\021\056\041" +
    "\015\042\017\001\002\000\040\006\uffd2\007\uffd2\010\uffd2" +
    "\011\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\021" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\001\002" +
    "\000\016\006\012\007\014\010\013\011\023\041\015\042" +
    "\017\001\002\000\004\002\uffff\001\002\000\016\006\012" +
    "\007\014\010\013\011\023\041\015\042\017\001\002\000" +
    "\004\020\030\001\002\000\016\006\012\007\014\010\013" +
    "\011\023\041\015\042\017\001\002\000\016\006\012\007" +
    "\014\010\013\011\023\041\015\042\017\001\002\000\004" +
    "\002\ufffc\001\002\000\004\002\ufffb\001\002\000\014\015" +
    "\032\021\033\040\035\041\015\042\017\001\002\000\020" +
    "\006\uffee\007\uffee\010\uffee\011\uffee\021\uffee\041\uffee\042" +
    "\uffee\001\002\000\004\035\045\001\002\000\020\006\uffea" +
    "\007\uffea\010\uffea\011\uffea\021\uffea\041\uffea\042\uffea\001" +
    "\002\000\014\015\032\021\033\040\035\041\015\042\017" +
    "\001\002\000\004\035\036\001\002\000\006\032\037\034" +
    "\040\001\002\000\012\023\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\001\002\000\012\023\uffd7\025\uffd7\026\uffd7\027\uffd7\001" +
    "\002\000\004\027\042\001\002\000\014\015\032\021\033" +
    "\040\035\041\015\042\017\001\002\000\020\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\021\uffec\041\uffec\042\uffec\001\002" +
    "\000\020\006\uffeb\007\uffeb\010\uffeb\011\uffeb\021\uffeb\041" +
    "\uffeb\042\uffeb\001\002\000\006\032\037\034\040\001\002" +
    "\000\004\027\047\001\002\000\014\015\032\021\033\040" +
    "\035\041\015\042\017\001\002\000\020\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\021\uffed\041\uffed\042\uffed\001\002\000" +
    "\004\002\ufffd\001\002\000\004\002\ufffa\001\002\000\016" +
    "\007\014\010\013\011\023\021\056\041\015\042\017\001" +
    "\002\000\004\002\ufffe\001\002\000\016\007\014\010\013" +
    "\011\023\021\056\041\015\042\017\001\002\000\004\002" +
    "\ufff5\001\002\000\016\007\014\010\013\011\023\021\056" +
    "\041\015\042\017\001\002\000\016\007\014\010\013\011" +
    "\023\021\056\041\015\042\017\001\002\000\004\002\ufff8" +
    "\001\002\000\004\002\ufff6\001\002\000\004\002\ufff9\001" +
    "\002\000\004\002\ufff7\001\002\000\022\015\072\016\067" +
    "\017\073\021\074\036\071\037\070\041\015\042\017\001" +
    "\002\000\020\006\uffe3\007\uffe3\010\uffe3\011\uffe3\021\uffe3" +
    "\041\uffe3\042\uffe3\001\002\000\004\035\124\001\002\000" +
    "\004\035\120\001\002\000\004\035\114\001\002\000\004" +
    "\035\110\001\002\000\004\035\077\001\002\000\020\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\021\uffdc\041\uffdc\042\uffdc" +
    "\001\002\000\022\015\072\016\067\017\073\021\074\036" +
    "\071\037\070\041\015\042\017\001\002\000\020\006\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\021\uffdd\041\uffdd\042\uffdd\001" +
    "\002\000\004\024\100\001\002\000\006\032\037\034\040" +
    "\001\002\000\006\025\uffda\026\106\001\002\000\004\025" +
    "\103\001\002\000\004\027\104\001\002\000\022\015\072" +
    "\016\067\017\073\021\074\036\071\037\070\041\015\042" +
    "\017\001\002\000\020\006\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\021\uffe1\041\uffe1\042\uffe1\001\002\000\006\032\037\034" +
    "\040\001\002\000\004\025\uffdb\001\002\000\006\032\037" +
    "\034\040\001\002\000\004\027\112\001\002\000\022\015" +
    "\072\016\067\017\073\021\074\036\071\037\070\041\015" +
    "\042\017\001\002\000\020\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\021\uffe2\041\uffe2\042\uffe2\001\002\000\006\032\037" +
    "\034\040\001\002\000\004\027\116\001\002\000\022\015" +
    "\072\016\067\017\073\021\074\036\071\037\070\041\015" +
    "\042\017\001\002\000\020\006\uffdf\007\uffdf\010\uffdf\011" +
    "\uffdf\021\uffdf\041\uffdf\042\uffdf\001\002\000\006\032\037" +
    "\034\040\001\002\000\004\027\122\001\002\000\022\015" +
    "\072\016\067\017\073\021\074\036\071\037\070\041\015" +
    "\042\017\001\002\000\020\006\uffde\007\uffde\010\uffde\011" +
    "\uffde\021\uffde\041\uffde\042\uffde\001\002\000\004\024\125" +
    "\001\002\000\006\033\126\034\127\001\002\000\006\025" +
    "\uffd4\026\uffd4\001\002\000\006\025\uffd5\026\uffd5\001\002" +
    "\000\006\025\uffd8\026\135\001\002\000\004\025\132\001" +
    "\002\000\004\027\133\001\002\000\022\015\072\016\067" +
    "\017\073\021\074\036\071\037\070\041\015\042\017\001" +
    "\002\000\020\006\uffe0\007\uffe0\010\uffe0\011\uffe0\021\uffe0" +
    "\041\uffe0\042\uffe0\001\002\000\006\033\126\034\127\001" +
    "\002\000\004\025\uffd9\001\002\000\016\015\140\016\144" +
    "\017\142\021\141\041\015\042\017\001\002\000\004\035" +
    "\163\001\002\000\020\006\uffe4\007\uffe4\010\uffe4\011\uffe4" +
    "\021\uffe4\041\uffe4\042\uffe4\001\002\000\004\035\155\001" +
    "\002\000\016\015\140\016\144\017\142\021\141\041\015" +
    "\042\017\001\002\000\004\035\146\001\002\000\020\006" +
    "\uffe9\007\uffe9\010\uffe9\011\uffe9\021\uffe9\041\uffe9\042\uffe9" +
    "\001\002\000\004\024\147\001\002\000\006\033\126\034" +
    "\127\001\002\000\004\025\151\001\002\000\004\027\152" +
    "\001\002\000\016\015\140\016\144\017\142\021\141\041" +
    "\015\042\017\001\002\000\020\006\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\021\uffe6\041\uffe6\042\uffe6\001\002\000\020\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\021\uffe5\041\uffe5\042\uffe5" +
    "\001\002\000\004\024\156\001\002\000\006\032\037\034" +
    "\040\001\002\000\004\025\160\001\002\000\004\027\161" +
    "\001\002\000\016\015\140\016\144\017\142\021\141\041" +
    "\015\042\017\001\002\000\020\006\uffe7\007\uffe7\010\uffe7" +
    "\011\uffe7\021\uffe7\041\uffe7\042\uffe7\001\002\000\006\032" +
    "\037\034\040\001\002\000\004\027\165\001\002\000\016" +
    "\015\140\016\144\017\142\021\141\041\015\042\017\001" +
    "\002\000\020\006\uffe8\007\uffe8\010\uffe8\011\uffe8\021\uffe8" +
    "\041\uffe8\042\uffe8\001\002\000\006\032\037\034\040\001" +
    "\002\000\004\026\171\001\002\000\006\032\037\034\040" +
    "\001\002\000\004\023\173\001\002\000\004\027\174\001" +
    "\002\000\016\007\uffef\010\uffef\011\uffef\021\uffef\041\uffef" +
    "\042\uffef\001\002\000\014\013\202\014\176\021\177\041" +
    "\015\042\017\001\002\000\004\034\211\001\002\000\016" +
    "\006\ufff0\007\ufff0\010\ufff0\011\ufff0\041\ufff0\042\ufff0\001" +
    "\002\000\016\006\ufff4\007\ufff4\010\ufff4\011\ufff4\041\ufff4" +
    "\042\ufff4\001\002\000\014\013\202\014\176\021\177\041" +
    "\015\042\017\001\002\000\004\034\203\001\002\000\004" +
    "\030\204\001\002\000\004\032\205\001\002\000\004\027" +
    "\206\001\002\000\014\013\202\014\176\021\177\041\015" +
    "\042\017\001\002\000\016\006\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\041\ufff3\042\ufff3\001\002\000\016\006\ufff1\007\ufff1" +
    "\010\ufff1\011\ufff1\041\ufff1\042\ufff1\001\002\000\004\030" +
    "\212\001\002\000\004\033\213\001\002\000\004\027\214" +
    "\001\002\000\014\013\202\014\176\021\177\041\015\042" +
    "\017\001\002\000\016\006\ufff2\007\ufff2\010\ufff2\011\ufff2" +
    "\041\ufff2\042\ufff2\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\006\002\004\004\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\010" +
    "\001\001\000\002\001\001\000\016\005\017\011\024\016" +
    "\021\021\020\022\015\023\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\052\011\057\015\053\016\054\023\056\001\001" +
    "\000\002\001\001\000\016\005\017\011\024\016\021\021" +
    "\051\022\015\023\023\001\001\000\002\001\001\000\016" +
    "\005\017\011\024\016\021\021\050\022\015\023\023\001" +
    "\001\000\002\001\001\000\016\005\017\011\024\016\021" +
    "\021\026\022\015\023\023\001\001\000\016\005\017\011" +
    "\024\016\021\021\025\022\015\023\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\030\023\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\043\023\033\001\001\000\002\001\001\000" +
    "\004\003\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\042\023\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\045\001\001" +
    "\000\002\001\001\000\006\006\047\023\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\052\011\057\015\063\016\054\023\056\001\001\000" +
    "\002\001\001\000\014\005\052\011\057\015\062\016\054" +
    "\023\056\001\001\000\002\001\001\000\014\005\052\011" +
    "\057\015\061\016\054\023\056\001\001\000\014\005\052" +
    "\011\057\015\060\016\054\023\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\065\023\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\075\023\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\100\007\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\104\023\074" +
    "\001\001\000\002\001\001\000\006\003\100\007\106\001" +
    "\001\000\002\001\001\000\004\003\110\001\001\000\002" +
    "\001\001\000\006\013\112\023\074\001\001\000\002\001" +
    "\001\000\004\003\114\001\001\000\002\001\001\000\006" +
    "\013\116\023\074\001\001\000\002\001\001\000\004\003" +
    "\120\001\001\000\002\001\001\000\006\013\122\023\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\130\012\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\133\023\074\001\001\000\002\001\001\000\006" +
    "\010\135\012\127\001\001\000\002\001\001\000\006\014" +
    "\144\023\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\153\023\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\147\012\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\152\023\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\100\007" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\161\023\142\001\001\000\002\001\001\000\004\003" +
    "\163\001\001\000\002\001\001\000\006\014\165\023\142" +
    "\001\001\000\002\001\001\000\004\003\167\001\001\000" +
    "\002\001\001\000\004\003\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\177\023" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\207\023\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\206\023\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\214\023\200\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserA1$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserA1$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserA1$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static String rutas[]=new String[2]; 


    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserA1$actions {
  private final parserA1 parser;

  /** Constructor */
  CUP$parserA1$actions(parserA1 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserA1$do_action_part00000000(
    int                        CUP$parserA1$act_num,
    java_cup.runtime.lr_parser CUP$parserA1$parser,
    java.util.Stack            CUP$parserA1$stack,
    int                        CUP$parserA1$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserA1$result;

      /* select the action based on the action number */
      switch (CUP$parserA1$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)).value;
		RESULT = start_val;
              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserA1$parser.done_parsing();
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ESTADISTICO 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ESTADISTICO ::= generarreporteestadistico llavea GLOBALES CUERPO 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("ESTADISTICO",2, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-3)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= COMPARAR CUERPO2 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CUERPO",15, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= BARRAS CUERPO 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CUERPO",15, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= PIE CUERPO 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CUERPO",15, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= COMENTARIO CUERPO 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CUERPO",15, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= LINEAS CUERPO 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CUERPO",15, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO2 ::= BARRAS CUERPO2 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CUERPO2",11, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO2 ::= PIE CUERPO2 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CUERPO2",11, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO2 ::= LINEAS CUERPO2 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CUERPO2",11, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO2 ::= COMENTARIO CUERPO2 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CUERPO2",11, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO2 ::= llavec 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CUERPO2",11, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // GLOBALES ::= definirglobales llavea INSTRUCCIONES 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("GLOBALES",14, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCIONES ::= sstring variable igual cadena pcoma INSTRUCCIONES 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",13, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-5)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCIONES ::= ddouble variable igual decimal pcoma INSTRUCCIONES 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",13, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-5)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCIONES ::= COMENTARIO INSTRUCCIONES 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",13, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCIONES ::= llavec 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",13, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // COMPARAR ::= compare parentesisa VAOCA coma VAOCA parentesisc pcoma 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("COMPARAR",16, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-6)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LINEAS ::= graficalineas llavea CONTENIDOL 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("LINEAS",3, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTENIDOL ::= titulo dpuntos VAOCA pcoma CONTENIDOL 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOL",4, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-4)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTENIDOL ::= archivo dpuntos VAOCA pcoma CONTENIDOL 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOL",4, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-4)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTENIDOL ::= COMENTARIO CONTENIDOL 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOL",4, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTENIDOL ::= llavec 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOL",4, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PIE ::= graficapie llavea CONTENIDOP 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("PIE",7, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTENIDOP ::= titulo dpuntos VAOCA pcoma CONTENIDOP 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",10, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-4)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTENIDOP ::= ejex dpuntos corchetea REPE corchetec pcoma CONTENIDOP 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",10, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-6)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTENIDOP ::= valores dpuntos corchetea REPE2 corchetec pcoma CONTENIDOP 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",10, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-6)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTENIDOP ::= COMENTARIO CONTENIDOP 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",10, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTENIDOP ::= llavec 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",10, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BARRAS ::= graficabarras llavea CONTENIDOB 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("BARRAS",12, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDOB ::= titulo dpuntos VAOCA pcoma CONTENIDOB 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOB",9, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-4)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDOB ::= ejex dpuntos corchetea REPE corchetec pcoma CONTENIDOB 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOB",9, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-6)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDOB ::= valores dpuntos corchetea REPE2 corchetec pcoma CONTENIDOB 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOB",9, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-6)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDOB ::= titulox dpuntos VAOCA pcoma CONTENIDOB 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOB",9, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-4)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTENIDOB ::= tituloy dpuntos VAOCA pcoma CONTENIDOB 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOB",9, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-4)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTENIDOB ::= COMENTARIO CONTENIDOB 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOB",9, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONTENIDOB ::= llavec 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOB",9, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // REPE ::= VAOCA coma REPE 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("REPE",5, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // REPE ::= VAOCA 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("REPE",5, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // REPE2 ::= VAODE coma REPE2 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("REPE2",6, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // REPE2 ::= VAODE 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("REPE2",6, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VAOCA ::= variable 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("VAOCA",1, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VAOCA ::= cadena 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("VAOCA",1, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VAODE ::= variable 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("VAODE",8, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VAODE ::= decimal 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("VAODE",8, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COMENTARIO ::= comentarioo 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("COMENTARIO",17, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COMENTARIO ::= comentarioomu 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("COMENTARIO",17, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserA1$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserA1$do_action(
    int                        CUP$parserA1$act_num,
    java_cup.runtime.lr_parser CUP$parserA1$parser,
    java.util.Stack            CUP$parserA1$stack,
    int                        CUP$parserA1$top)
    throws java.lang.Exception
    {
              return CUP$parserA1$do_action_part00000000(
                               CUP$parserA1$act_num,
                               CUP$parserA1$parser,
                               CUP$parserA1$stack,
                               CUP$parserA1$top);
    }
}

}
