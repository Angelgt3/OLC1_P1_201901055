
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.A1;

import java_cup.runtime.*;
import copyanalyzer.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserA1 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserA1() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserA1(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserA1(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\003\000\002\007" +
    "\006\000\002\003\004\000\002\003\003\000\002\003\003" +
    "\000\002\020\004\000\002\020\004\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\003\000\002\017\005\000\002\016\010\000\002\016\010" +
    "\000\002\016\021\000\002\016\013\000\002\016\004\000" +
    "\002\016\003\000\002\021\011\000\002\010\005\000\002" +
    "\011\007\000\002\011\007\000\002\011\004\000\002\011" +
    "\003\000\002\012\005\000\002\004\007\000\002\004\011" +
    "\000\002\004\011\000\002\004\004\000\002\004\003\000" +
    "\002\015\005\000\002\013\007\000\002\013\011\000\002" +
    "\013\011\000\002\013\007\000\002\013\007\000\002\013" +
    "\004\000\002\013\003\000\002\025\005\000\002\025\003" +
    "\000\002\024\005\000\002\024\003\000\002\006\003\000" +
    "\002\006\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\023\014\000\002\023\006\000\002\022" +
    "\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\010\004\012\041\007\042\004\001\002\000" +
    "\044\004\uffca\006\uffca\007\uffca\010\uffca\011\uffca\013\uffca" +
    "\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\036" +
    "\uffca\037\uffca\040\uffca\041\uffca\042\uffca\001\002\000\004" +
    "\002\000\001\002\000\012\004\012\020\ufffd\041\007\042" +
    "\004\001\002\000\044\004\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\011\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb" +
    "\001\002\000\004\002\255\001\002\000\004\020\013\001" +
    "\002\000\004\020\ufffc\001\002\000\004\005\014\001\002" +
    "\000\004\020\214\001\002\000\016\006\016\007\020\010" +
    "\017\011\025\041\007\042\004\001\002\000\004\022\206" +
    "\001\002\000\004\020\156\001\002\000\004\020\067\001" +
    "\002\000\016\007\020\010\017\011\025\021\060\041\007" +
    "\042\004\001\002\000\016\006\016\007\020\010\017\011" +
    "\025\041\007\042\004\001\002\000\004\002\uffff\001\002" +
    "\000\016\006\016\007\020\010\017\011\025\041\007\042" +
    "\004\001\002\000\004\020\032\001\002\000\016\006\016" +
    "\007\020\010\017\011\025\041\007\042\004\001\002\000" +
    "\016\006\016\007\020\010\017\011\025\041\007\042\004" +
    "\001\002\000\004\002\ufff9\001\002\000\004\002\ufff8\001" +
    "\002\000\014\015\034\021\035\040\036\041\007\042\004" +
    "\001\002\000\020\006\uffe9\007\uffe9\010\uffe9\011\uffe9\021" +
    "\uffe9\041\uffe9\042\uffe9\001\002\000\004\035\047\001\002" +
    "\000\020\006\uffe5\007\uffe5\010\uffe5\011\uffe5\021\uffe5\041" +
    "\uffe5\042\uffe5\001\002\000\004\035\041\001\002\000\014" +
    "\015\034\021\035\040\036\041\007\042\004\001\002\000" +
    "\020\006\uffe6\007\uffe6\010\uffe6\011\uffe6\021\uffe6\041\uffe6" +
    "\042\uffe6\001\002\000\006\032\042\034\043\001\002\000" +
    "\010\025\uffd1\026\uffd1\027\uffd1\001\002\000\010\025\uffd2" +
    "\026\uffd2\027\uffd2\001\002\000\004\027\045\001\002\000" +
    "\014\015\034\021\035\040\036\041\007\042\004\001\002" +
    "\000\020\006\uffe7\007\uffe7\010\uffe7\011\uffe7\021\uffe7\041" +
    "\uffe7\042\uffe7\001\002\000\006\032\042\034\043\001\002" +
    "\000\004\027\051\001\002\000\014\015\034\021\035\040" +
    "\036\041\007\042\004\001\002\000\020\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\021\uffe8\041\uffe8\042\uffe8\001\002\000" +
    "\004\002\ufffa\001\002\000\004\002\ufff7\001\002\000\016" +
    "\007\020\010\017\011\025\021\060\041\007\042\004\001" +
    "\002\000\004\002\ufffb\001\002\000\016\007\020\010\017" +
    "\011\025\021\060\041\007\042\004\001\002\000\004\002" +
    "\ufff2\001\002\000\016\007\020\010\017\011\025\021\060" +
    "\041\007\042\004\001\002\000\016\007\020\010\017\011" +
    "\025\021\060\041\007\042\004\001\002\000\004\002\ufff5" +
    "\001\002\000\004\002\ufff3\001\002\000\004\002\ufff6\001" +
    "\002\000\004\002\ufff4\001\002\000\022\015\074\016\071" +
    "\017\075\021\076\036\073\037\072\041\007\042\004\001" +
    "\002\000\020\006\uffde\007\uffde\010\uffde\011\uffde\021\uffde" +
    "\041\uffde\042\uffde\001\002\000\004\035\126\001\002\000" +
    "\004\035\122\001\002\000\004\035\116\001\002\000\004" +
    "\035\112\001\002\000\004\035\101\001\002\000\020\006" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\021\uffd7\041\uffd7\042\uffd7" +
    "\001\002\000\022\015\074\016\071\017\075\021\076\036" +
    "\073\037\072\041\007\042\004\001\002\000\020\006\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\021\uffd8\041\uffd8\042\uffd8\001" +
    "\002\000\004\024\102\001\002\000\006\032\042\034\043" +
    "\001\002\000\006\025\uffd5\026\110\001\002\000\004\025" +
    "\105\001\002\000\004\027\106\001\002\000\022\015\074" +
    "\016\071\017\075\021\076\036\073\037\072\041\007\042" +
    "\004\001\002\000\020\006\uffdc\007\uffdc\010\uffdc\011\uffdc" +
    "\021\uffdc\041\uffdc\042\uffdc\001\002\000\006\032\042\034" +
    "\043\001\002\000\004\025\uffd6\001\002\000\006\032\042" +
    "\034\043\001\002\000\004\027\114\001\002\000\022\015" +
    "\074\016\071\017\075\021\076\036\073\037\072\041\007" +
    "\042\004\001\002\000\020\006\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\021\uffdd\041\uffdd\042\uffdd\001\002\000\006\032\042" +
    "\034\043\001\002\000\004\027\120\001\002\000\022\015" +
    "\074\016\071\017\075\021\076\036\073\037\072\041\007" +
    "\042\004\001\002\000\020\006\uffda\007\uffda\010\uffda\011" +
    "\uffda\021\uffda\041\uffda\042\uffda\001\002\000\006\032\042" +
    "\034\043\001\002\000\004\027\124\001\002\000\022\015" +
    "\074\016\071\017\075\021\076\036\073\037\072\041\007" +
    "\042\004\001\002\000\020\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\021\uffd9\041\uffd9\042\uffd9\001\002\000\004\024\127" +
    "\001\002\000\010\031\132\033\131\034\133\001\002\000" +
    "\006\025\uffce\026\uffce\001\002\000\006\025\uffd0\026\uffd0" +
    "\001\002\000\004\020\143\001\002\000\006\025\uffcf\026" +
    "\uffcf\001\002\000\006\025\uffd3\026\141\001\002\000\004" +
    "\025\136\001\002\000\004\027\137\001\002\000\022\015" +
    "\074\016\071\017\075\021\076\036\073\037\072\041\007" +
    "\042\004\001\002\000\020\006\uffdb\007\uffdb\010\uffdb\011" +
    "\uffdb\021\uffdb\041\uffdb\042\uffdb\001\002\000\010\031\132" +
    "\033\131\034\133\001\002\000\004\025\uffd4\001\002\000" +
    "\006\012\144\043\145\001\002\000\004\026\147\001\002" +
    "\000\004\021\146\001\002\000\006\025\uffcc\026\uffcc\001" +
    "\002\000\004\032\150\001\002\000\004\026\151\001\002" +
    "\000\004\032\152\001\002\000\004\026\153\001\002\000" +
    "\004\032\154\001\002\000\004\021\155\001\002\000\006" +
    "\025\uffcd\026\uffcd\001\002\000\016\015\160\016\163\017" +
    "\161\021\157\041\007\042\004\001\002\000\020\006\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\021\uffdf\041\uffdf\042\uffdf\001" +
    "\002\000\004\035\202\001\002\000\004\035\174\001\002" +
    "\000\016\015\160\016\163\017\161\021\157\041\007\042" +
    "\004\001\002\000\004\035\165\001\002\000\020\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\021\uffe4\041\uffe4\042\uffe4\001" +
    "\002\000\004\024\166\001\002\000\010\031\132\033\131" +
    "\034\133\001\002\000\004\025\170\001\002\000\004\027" +
    "\171\001\002\000\016\015\160\016\163\017\161\021\157" +
    "\041\007\042\004\001\002\000\020\006\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\021\uffe1\041\uffe1\042\uffe1\001\002\000\020" +
    "\006\uffe0\007\uffe0\010\uffe0\011\uffe0\021\uffe0\041\uffe0\042" +
    "\uffe0\001\002\000\004\024\175\001\002\000\006\032\042" +
    "\034\043\001\002\000\004\025\177\001\002\000\004\027" +
    "\200\001\002\000\016\015\160\016\163\017\161\021\157" +
    "\041\007\042\004\001\002\000\020\006\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\021\uffe2\041\uffe2\042\uffe2\001\002\000\006" +
    "\032\042\034\043\001\002\000\004\027\204\001\002\000" +
    "\016\015\160\016\163\017\161\021\157\041\007\042\004" +
    "\001\002\000\020\006\uffe3\007\uffe3\010\uffe3\011\uffe3\021" +
    "\uffe3\041\uffe3\042\uffe3\001\002\000\004\032\207\001\002" +
    "\000\004\026\210\001\002\000\004\032\211\001\002\000" +
    "\004\023\212\001\002\000\004\027\213\001\002\000\016" +
    "\007\uffea\010\uffea\011\uffea\021\uffea\041\uffea\042\uffea\001" +
    "\002\000\014\013\221\014\215\021\216\041\007\042\004" +
    "\001\002\000\004\034\230\001\002\000\016\006\uffeb\007" +
    "\uffeb\010\uffeb\011\uffeb\041\uffeb\042\uffeb\001\002\000\016" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\041\ufff1\042\ufff1\001" +
    "\002\000\014\013\221\014\215\021\216\041\007\042\004" +
    "\001\002\000\004\034\222\001\002\000\004\030\223\001" +
    "\002\000\004\032\224\001\002\000\004\027\225\001\002" +
    "\000\014\013\221\014\215\021\216\041\007\042\004\001" +
    "\002\000\016\006\ufff0\007\ufff0\010\ufff0\011\ufff0\041\ufff0" +
    "\042\ufff0\001\002\000\016\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\041\uffec\042\uffec\001\002\000\004\030\231\001\002" +
    "\000\006\031\233\033\232\001\002\000\004\027\253\001" +
    "\002\000\004\020\234\001\002\000\006\012\235\043\236" +
    "\001\002\000\004\026\242\001\002\000\004\021\237\001" +
    "\002\000\004\027\240\001\002\000\014\013\221\014\215" +
    "\021\216\041\007\042\004\001\002\000\016\006\uffed\007" +
    "\uffed\010\uffed\011\uffed\041\uffed\042\uffed\001\002\000\004" +
    "\032\243\001\002\000\004\026\244\001\002\000\004\032" +
    "\245\001\002\000\004\026\246\001\002\000\004\032\247" +
    "\001\002\000\004\021\250\001\002\000\004\027\251\001" +
    "\002\000\014\013\221\014\215\021\216\041\007\042\004" +
    "\001\002\000\016\006\uffee\007\uffee\010\uffee\011\uffee\041" +
    "\uffee\042\uffee\001\002\000\014\013\221\014\215\021\216" +
    "\041\007\042\004\001\002\000\016\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\041\uffef\042\uffef\001\002\000\004\002\001" +
    "\001\002\000\004\020\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\012\002\007\003\010\007\004\022\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\255" +
    "\022\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\014\001\001" +
    "\000\002\001\001\000\016\010\021\012\026\015\023\020" +
    "\022\021\020\022\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\010\054\012\061\014" +
    "\055\015\056\022\060\001\001\000\016\010\021\012\026" +
    "\015\023\020\053\021\020\022\025\001\001\000\002\001" +
    "\001\000\016\010\021\012\026\015\023\020\052\021\020" +
    "\022\025\001\001\000\002\001\001\000\016\010\021\012" +
    "\026\015\023\020\030\021\020\022\025\001\001\000\016" +
    "\010\021\012\026\015\023\020\027\021\020\022\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\032" +
    "\022\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\037\022\036" +
    "\001\001\000\002\001\001\000\004\006\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\045\022\036\001\001\000\002\001\001\000\004\006" +
    "\047\001\001\000\002\001\001\000\006\011\051\022\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\010\054\012\061\014\065\015\056\022\060" +
    "\001\001\000\002\001\001\000\014\010\054\012\061\014" +
    "\064\015\056\022\060\001\001\000\002\001\001\000\014" +
    "\010\054\012\061\014\063\015\056\022\060\001\001\000" +
    "\014\010\054\012\061\014\062\015\056\022\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\067\022\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\077\022\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\102\025\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\106\022\076\001\001\000\002\001\001\000\006\006\102" +
    "\025\110\001\001\000\002\001\001\000\004\006\112\001" +
    "\001\000\002\001\001\000\006\013\114\022\076\001\001" +
    "\000\002\001\001\000\004\006\116\001\001\000\002\001" +
    "\001\000\006\013\120\022\076\001\001\000\002\001\001" +
    "\000\004\006\122\001\001\000\002\001\001\000\006\013" +
    "\124\022\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\133\023\127\024\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\137\022\076\001\001\000\002\001\001\000\010" +
    "\005\133\023\127\024\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\163\022\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\172\022\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\133\023\127\024\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\171\022\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\102\025\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\200\022\161" +
    "\001\001\000\002\001\001\000\004\006\202\001\001\000" +
    "\002\001\001\000\006\004\204\022\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\216\022\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\226\022\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\225\022\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\240\022\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\251\022\217\001\001\000\002\001" +
    "\001\000\006\016\253\022\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserA1$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserA1$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserA1$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        public static NodoA Raiz;    
        public static String rutas[]=new String[2]; 
        public static String tipo[]=new String[100];
        public static String id[]=new String[100];
        public static String valor[]=new String[100];
        public static String archivo[]=new String[100];
        public static String tipo2[]=new String[100];
        public static String bid2[]=new String[100];
        public static String id2[]=new String[100];
        public static int cont=0;
        public static int cont2=0;

        public static void guardar(int c,String vtipo, String idd, String valorr){
                tipo[c]=vtipo;
                id[c]=idd;
                valor[c]=valorr;
        }
        public static void gpes(int c2,String archivoo, String vtipo, String bid,String idd){
                archivo[c2]=archivoo;
                tipo2[c2]=vtipo;
                bid2[c2]=bid;
                id2[c2]=idd;
        }
        
        public static String ltitulo[]=new String[100];
        public static int cont3=0;
        public static boolean vard[]=new boolean[100];
        public static void glti(int c3,String tituloo){
                ltitulo[c3]=tituloo;
        }
        public static int cont4=0;
        public static String larchivo[]=new String[100];
        public static void glar(int c4,String archivoo){
                larchivo[c4]=archivoo;
        }
        public static int cont51=0,cont52=0;
        public static String[][] vgpie=new String[40][40];
        public static String[] qgpie=new String[40];
        public static String[] temp=new String[40];
        public static String[] temp2=new String[40];

        public void syntax_error(Symbol s){ 
                System.out.println("Error Sintáctico en la Línea " + (s.left) +
                " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        } 

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
                System.out.println("Error síntactico irrecuperable en la Línea " + 
                (s.left)+ " Columna "+s.right+". Componente " + s.value + 
                " no reconocido."); 
        }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserA1$actions {
  private final parserA1 parser;

  /** Constructor */
  CUP$parserA1$actions(parserA1 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserA1$do_action_part00000000(
    int                        CUP$parserA1$act_num,
    java_cup.runtime.lr_parser CUP$parserA1$parser,
    java.util.Stack            CUP$parserA1$stack,
    int                        CUP$parserA1$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserA1$result;

      /* select the action based on the action number */
      switch (CUP$parserA1$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)).value;
		RESULT = start_val;
              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserA1$parser.done_parsing();
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ESTADISTICO 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ESTADISTICO ::= FUERA llavea GLOBALES CUERPO 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("ESTADISTICO",5, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-3)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUERA ::= COMENTARIO FUERA 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("FUERA",1, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUERA ::= COMENTARIO 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("FUERA",1, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUERA ::= generarreporteestadistico 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("FUERA",1, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= COMPARAR CUERPO2 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= BARRAS CUERPO 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= PIE CUERPO 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= COMENTARIO CUERPO 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO ::= LINEAS CUERPO 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO2 ::= BARRAS CUERPO2 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CUERPO2",10, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO2 ::= PIE CUERPO2 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CUERPO2",10, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO2 ::= LINEAS CUERPO2 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CUERPO2",10, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO2 ::= COMENTARIO CUERPO2 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CUERPO2",10, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO2 ::= llavec 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CUERPO2",10, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // GLOBALES ::= definirglobales llavea INSTRUCCIONES 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("GLOBALES",13, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCIONES ::= sstring variable igual cadena pcoma INSTRUCCIONES 
            {
              String RESULT =null;
		int va1left = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-4)).left;
		int va1right = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-4)).right;
		String va1 = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.elementAt(CUP$parserA1$top-4)).value;
		int va2left = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).left;
		int va2right = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).right;
		String va2 = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).value;
		guardar(cont,"stringg",va1,va2);cont++;
              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",12, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-5)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCIONES ::= ddouble variable igual decimal pcoma INSTRUCCIONES 
            {
              String RESULT =null;
		int va1left = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-4)).left;
		int va1right = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-4)).right;
		String va1 = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.elementAt(CUP$parserA1$top-4)).value;
		int va2left = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).left;
		int va2right = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).right;
		String va2 = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).value;
		guardar(cont,"doublee",va1,va2);cont++;
              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",12, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-5)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCIONES ::= ddouble variable igual dolar llavea puntajeespecifico coma cadena coma cadena coma cadena llavec pcoma INSTRUCCIONES 
            {
              String RESULT =null;
		int va1left = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-13)).left;
		int va1right = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-13)).right;
		String va1 = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.elementAt(CUP$parserA1$top-13)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-7)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-7)).right;
		String a1 = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.elementAt(CUP$parserA1$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-5)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-5)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.elementAt(CUP$parserA1$top-5)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-3)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-3)).right;
		String a3 = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.elementAt(CUP$parserA1$top-3)).value;
		gpes(cont2,a1,a2,a3,va1);cont2++;
              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",12, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-14)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCIONES ::= ddouble variable igual dolar llavea Puntajegeneral llavec pcoma INSTRUCCIONES 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",12, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-8)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCIONES ::= COMENTARIO INSTRUCCIONES 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",12, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCIONES ::= llavec 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",12, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COMPARAR ::= compare parentesisa cadena coma cadena parentesisc pcoma 
            {
              String RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-4)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.elementAt(CUP$parserA1$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).value;
		rutas[0]=r1;rutas[1]=r2;
              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("COMPARAR",15, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-6)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LINEAS ::= graficalineas llavea CONTENIDOL 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("LINEAS",6, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTENIDOL ::= titulo dpuntos VAOCA pcoma CONTENIDOL 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).value;
		glti(cont3,b);cont3++;
              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOL",7, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-4)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTENIDOL ::= archivo dpuntos VAOCA pcoma CONTENIDOL 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).value;
		glar(cont4,b);cont4++;
              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOL",7, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-4)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTENIDOL ::= COMENTARIO CONTENIDOL 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOL",7, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTENIDOL ::= llavec 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOL",7, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PIE ::= graficapie llavea CONTENIDOP 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("PIE",8, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDOP ::= titulo dpuntos VAOCA pcoma CONTENIDOP 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).value;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",2, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-4)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDOP ::= ejex dpuntos corchetea REPE corchetec pcoma CONTENIDOP 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",2, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-6)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDOP ::= valores dpuntos corchetea REPE2 corchetec pcoma CONTENIDOP 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",2, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-6)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDOP ::= COMENTARIO CONTENIDOP 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",2, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDOP ::= llavec 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",2, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BARRAS ::= graficabarras llavea CONTENIDOB 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("BARRAS",11, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTENIDOB ::= titulo dpuntos VAOCA pcoma CONTENIDOB 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).value;
		qgpie[cont51]="titulo"; vgpie[cont51][cont52]=va; cont51++;cont52=0;
              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOB",9, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-4)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONTENIDOB ::= ejex dpuntos corchetea REPE corchetec pcoma CONTENIDOB 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOB",9, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-6)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONTENIDOB ::= valores dpuntos corchetea REPE2 corchetec pcoma CONTENIDOB 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOB",9, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-6)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONTENIDOB ::= titulox dpuntos VAOCA pcoma CONTENIDOB 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).value;
		qgpie[cont51]="titulox"; vgpie[cont51][cont52]=va; cont51++;cont52=0;
              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOB",9, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-4)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONTENIDOB ::= tituloy dpuntos VAOCA pcoma CONTENIDOB 
            {
              String RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).value;
		qgpie[cont51]="tituloy"; vgpie[cont51][cont52]=va; cont51++;cont52=0;
              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOB",9, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-4)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONTENIDOB ::= COMENTARIO CONTENIDOB 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOB",9, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-1)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONTENIDOB ::= llavec 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("CONTENIDOB",9, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // REPE ::= VAOCA coma REPE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).value;
		temp[cont52]=a; cont52++;
              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("REPE",19, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // REPE ::= VAOCA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.peek()).value;
		qgpie[cont51]="ejex";temp[cont52]=a;vgpie[cont51]=temp;cont52=0;cont51++;
              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("REPE",19, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // REPE2 ::= VAODE coma REPE2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)).value;
		temp2[cont52]=a; cont52++;
              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("REPE2",18, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-2)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // REPE2 ::= VAODE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.peek()).value;
		qgpie[cont51]="valores";temp2[cont52]=a;vgpie[cont51]=temp2;cont52=0;cont51++;
              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("REPE2",18, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VAOCA ::= variable 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.peek()).value;
		RESULT=p;
              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("VAOCA",4, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VAOCA ::= cadena 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.peek()).value;
		RESULT=p;
              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("VAOCA",4, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VAODE ::= decimal 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.peek()).value;
		RESULT=p;
              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("VAODE",3, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VAODE ::= variable 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.peek()).value;
		RESULT=p;
              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("VAODE",3, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VAODE ::= PUNTAJE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parserA1$stack.peek()).value;
		RESULT=p;
              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("VAODE",3, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PUNTAJE ::= dolar llavea puntajeespecifico coma cadena coma cadena coma cadena llavec 
            {
              String RESULT =null;
		RESULT="pe";
              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("PUNTAJE",17, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-9)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PUNTAJE ::= dolar llavea Puntajegeneral llavec 
            {
              String RESULT =null;
		RESULT="pe";
              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("PUNTAJE",17, ((java_cup.runtime.Symbol)CUP$parserA1$stack.elementAt(CUP$parserA1$top-3)), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COMENTARIO ::= comentarioo 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("COMENTARIO",16, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COMENTARIO ::= comentarioomu 
            {
              String RESULT =null;

              CUP$parserA1$result = parser.getSymbolFactory().newSymbol("COMENTARIO",16, ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserA1$stack.peek()), RESULT);
            }
          return CUP$parserA1$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserA1$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserA1$do_action(
    int                        CUP$parserA1$act_num,
    java_cup.runtime.lr_parser CUP$parserA1$parser,
    java.util.Stack            CUP$parserA1$stack,
    int                        CUP$parserA1$top)
    throws java.lang.Exception
    {
              return CUP$parserA1$do_action_part00000000(
                               CUP$parserA1$act_num,
                               CUP$parserA1$parser,
                               CUP$parserA1$stack,
                               CUP$parserA1$top);
    }
}

}
